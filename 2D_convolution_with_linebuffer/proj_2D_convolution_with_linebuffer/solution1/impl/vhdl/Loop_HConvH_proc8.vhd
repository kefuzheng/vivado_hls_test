-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.0
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_HConvH_proc8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    src_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    src_V_TVALID : IN STD_LOGIC;
    src_V_TREADY : OUT STD_LOGIC;
    hconv_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    hconv_V_full_n : IN STD_LOGIC;
    hconv_V_write : OUT STD_LOGIC );
end;


architecture behav of Loop_HConvH_proc8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_10A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001010";
    constant ap_const_lv32_2D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010100";
    constant ap_const_lv32_335 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110101";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_1F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_0_vld_in : STD_LOGIC;
    signal src_V_0_vld_out : STD_LOGIC;
    signal src_V_0_ack_in : STD_LOGIC;
    signal src_V_0_ack_out : STD_LOGIC;
    signal src_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_0_sel : STD_LOGIC;
    signal src_V_0_load_A : STD_LOGIC;
    signal src_V_0_load_B : STD_LOGIC;
    signal src_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_0_state_cmp_full : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal width_blk_n : STD_LOGIC;
    signal src_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln168_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hconv_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln178_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_575_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_137 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_0_i_i_reg_148 : STD_LOGIC_VECTOR (10 downto 0);
    signal height_read_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal width_read_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_504 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal hwin_1_1_i_load_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal hwin_1_1_i_load_reg_509_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_1_1_i_load_reg_509_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_3_load_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_3_load_reg_525_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_6_load_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_7_load_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln168_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln168_reg_555_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln168_reg_555_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln168_reg_555_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln168_reg_555_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln168_reg_555_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln168_fu_215_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_569_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_569_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln178_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_575_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_575_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_575_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_575_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_575_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_324_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_1_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_3_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_4_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_7_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_8_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_5_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_6_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_1_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_1_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_1_reg_624_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_1_reg_624_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_3_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_3_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_3_reg_629_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_3_reg_629_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_5_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_5_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_5_reg_634_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_8_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_8_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln176_2_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_9_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_9_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_10_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_10_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal hwin_1_1_i_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_2_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_3_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_4_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_5_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_6_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_7_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_8_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_9_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_165_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln169_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln169_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln169_fu_269_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_335_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln176_2_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln176_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln176_3_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_2_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln176_1_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_7_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_6_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_4_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal grp_fu_289_ce : STD_LOGIC;
    signal grp_fu_295_ce : STD_LOGIC;
    signal grp_fu_301_ce : STD_LOGIC;
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_335_ce : STD_LOGIC;
    signal grp_fu_340_ce : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_165_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_165_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component filter11x11_strm_mul_32ns_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filter11x11_strm_mul_8ns_32s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter11x11_strm_mul_10ns_32s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter11x11_strm_mul_11ns_32s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    filter11x11_strm_mul_32ns_32ns_64_3_1_U12 : component filter11x11_strm_mul_32ns_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_165_p0,
        din1 => grp_fu_165_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_165_p2);

    filter11x11_strm_mul_8ns_32s_32_3_1_U13 : component filter11x11_strm_mul_8ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => hwin_1_fu_76,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    filter11x11_strm_mul_10ns_32s_32_3_1_U14 : component filter11x11_strm_mul_10ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => hwin_2_fu_80,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p2);

    filter11x11_strm_mul_11ns_32s_32_3_1_U15 : component filter11x11_strm_mul_11ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => hwin_4_fu_88,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p2);

    filter11x11_strm_mul_11ns_32s_32_3_1_U16 : component filter11x11_strm_mul_11ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_295_p0,
        din1 => hwin_5_fu_92,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p2);

    filter11x11_strm_mul_10ns_32s_32_3_1_U17 : component filter11x11_strm_mul_10ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_301_p0,
        din1 => hwin_8_fu_104,
        ce => grp_fu_301_ce,
        dout => grp_fu_301_p2);

    filter11x11_strm_mul_8ns_32s_32_3_1_U18 : component filter11x11_strm_mul_8ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => hwin_9_fu_108,
        ce => grp_fu_307_ce,
        dout => grp_fu_307_p2);

    filter11x11_strm_mul_11ns_32s_32_3_1_U19 : component filter11x11_strm_mul_11ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        din1 => hwin_6_load_reg_540,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    filter11x11_strm_mul_10ns_32s_32_3_1_U20 : component filter11x11_strm_mul_10ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p0,
        din1 => hwin_7_load_reg_545,
        ce => grp_fu_335_ce,
        dout => grp_fu_335_p2);

    filter11x11_strm_mul_10ns_32s_32_3_1_U21 : component filter11x11_strm_mul_10ns_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_340_p0,
        din1 => hwin_3_load_reg_525_pp0_iter1_reg,
        ce => grp_fu_340_ce,
        dout => grp_fu_340_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    src_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_0_ack_out = ap_const_logic_1) and (src_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_0_sel_rd <= not(src_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_0_ack_in = ap_const_logic_1) and (src_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_0_sel_wr <= not(src_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_0_state = ap_const_lv2_2) and (src_V_0_vld_in = ap_const_logic_0)) or ((src_V_0_state = ap_const_lv2_3) and (src_V_0_vld_in = ap_const_logic_0) and (src_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_0_state = ap_const_lv2_1) and (src_V_0_ack_out = ap_const_logic_0)) or ((src_V_0_state = ap_const_lv2_3) and (src_V_0_ack_out = ap_const_logic_0) and (src_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_0_vld_in = ap_const_logic_0) and (src_V_0_ack_out = ap_const_logic_1))) and not(((src_V_0_ack_out = ap_const_logic_0) and (src_V_0_vld_in = ap_const_logic_1))) and (src_V_0_state = ap_const_lv2_3)) or ((src_V_0_state = ap_const_lv2_1) and (src_V_0_ack_out = ap_const_logic_1)) or ((src_V_0_state = ap_const_lv2_2) and (src_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_137 <= add_ln168_fu_215_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_137 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row_0_i_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_0_i_i_reg_148 <= row_fu_324_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                row_0_i_i_reg_148 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_reg_555_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln176_10_reg_654 <= add_ln176_10_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_reg_555_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln176_1_reg_624(31 downto 2) <= add_ln176_1_fu_371_p2(31 downto 2);
                add_ln176_3_reg_629 <= add_ln176_3_fu_381_p2;
                add_ln176_5_reg_634 <= add_ln176_5_fu_387_p2;
                add_ln176_8_reg_639 <= add_ln176_8_fu_391_p2;
                mul_ln176_5_reg_614 <= grp_fu_330_p2;
                mul_ln176_6_reg_619 <= grp_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    add_ln176_1_reg_624_pp0_iter4_reg(31 downto 2) <= add_ln176_1_reg_624(31 downto 2);
                    add_ln176_1_reg_624_pp0_iter5_reg(31 downto 2) <= add_ln176_1_reg_624_pp0_iter4_reg(31 downto 2);
                add_ln176_3_reg_629_pp0_iter4_reg <= add_ln176_3_reg_629;
                add_ln176_3_reg_629_pp0_iter5_reg <= add_ln176_3_reg_629_pp0_iter4_reg;
                add_ln176_5_reg_634_pp0_iter4_reg <= add_ln176_5_reg_634;
                hwin_1_1_i_load_reg_509_pp0_iter2_reg <= hwin_1_1_i_load_reg_509_pp0_iter1_reg;
                icmp_ln168_reg_555_pp0_iter2_reg <= icmp_ln168_reg_555_pp0_iter1_reg;
                icmp_ln168_reg_555_pp0_iter3_reg <= icmp_ln168_reg_555_pp0_iter2_reg;
                icmp_ln168_reg_555_pp0_iter4_reg <= icmp_ln168_reg_555_pp0_iter3_reg;
                icmp_ln168_reg_555_pp0_iter5_reg <= icmp_ln168_reg_555_pp0_iter4_reg;
                icmp_ln178_reg_575_pp0_iter2_reg <= icmp_ln178_reg_575_pp0_iter1_reg;
                icmp_ln178_reg_575_pp0_iter3_reg <= icmp_ln178_reg_575_pp0_iter2_reg;
                icmp_ln178_reg_575_pp0_iter4_reg <= icmp_ln178_reg_575_pp0_iter3_reg;
                icmp_ln178_reg_575_pp0_iter5_reg <= icmp_ln178_reg_575_pp0_iter4_reg;
                icmp_ln178_reg_575_pp0_iter6_reg <= icmp_ln178_reg_575_pp0_iter5_reg;
                tmp_2_reg_569_pp0_iter2_reg <= tmp_2_reg_569_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_reg_555_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln176_9_reg_649 <= add_ln176_9_fu_399_p2;
                mul_ln176_2_reg_644 <= grp_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_504 <= grp_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                height_read_reg_483 <= height_dout;
                width_read_reg_488 <= width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hwin_1_1_i_fu_72 <= hwin_1_fu_76;
                hwin_1_fu_76 <= hwin_2_fu_80;
                hwin_2_fu_80 <= hwin_3_fu_84;
                hwin_3_fu_84 <= hwin_4_fu_88;
                hwin_4_fu_88 <= hwin_5_fu_92;
                hwin_5_fu_92 <= hwin_6_fu_96;
                hwin_6_fu_96 <= hwin_7_fu_100;
                hwin_7_fu_100 <= hwin_8_fu_104;
                hwin_8_fu_104 <= hwin_9_fu_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hwin_1_1_i_load_reg_509 <= hwin_1_1_i_fu_72;
                hwin_1_1_i_load_reg_509_pp0_iter1_reg <= hwin_1_1_i_load_reg_509;
                hwin_3_load_reg_525 <= hwin_3_fu_84;
                hwin_3_load_reg_525_pp0_iter1_reg <= hwin_3_load_reg_525;
                hwin_6_load_reg_540 <= hwin_6_fu_96;
                hwin_7_load_reg_545 <= hwin_7_fu_100;
                icmp_ln168_reg_555 <= icmp_ln168_fu_210_p2;
                icmp_ln168_reg_555_pp0_iter1_reg <= icmp_ln168_reg_555;
                icmp_ln178_reg_575_pp0_iter1_reg <= icmp_ln178_reg_575;
                tmp_2_reg_569_pp0_iter1_reg <= tmp_2_reg_569;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hwin_9_fu_108 <= src_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln178_reg_575 <= icmp_ln178_fu_313_p2;
                tmp_2_reg_569 <= src_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_reg_555_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln176_1_reg_589 <= grp_fu_283_p2;
                mul_ln176_3_reg_594 <= grp_fu_289_p2;
                mul_ln176_4_reg_599 <= grp_fu_295_p2;
                mul_ln176_7_reg_604 <= grp_fu_301_p2;
                mul_ln176_8_reg_609 <= grp_fu_307_p2;
                mul_ln176_reg_584 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_0_load_A = ap_const_logic_1)) then
                src_V_0_payload_A <= src_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_0_load_B = ap_const_logic_1)) then
                src_V_0_payload_B <= src_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_reg_555_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_659 <= tmp_fu_417_p2;
            end if;
        end if;
    end process;
    add_ln176_1_reg_624(1 downto 0) <= "00";
    add_ln176_1_reg_624_pp0_iter4_reg(1 downto 0) <= "00";
    add_ln176_1_reg_624_pp0_iter5_reg(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, height_empty_n, width_empty_n, ap_enable_reg_pp0_iter0, icmp_ln168_fu_210_p2, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln168_fu_210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln168_fu_210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln168_fu_215_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_137) + unsigned(ap_const_lv64_1));
    add_ln176_10_fu_408_p2 <= std_logic_vector(unsigned(add_ln176_9_reg_649) + unsigned(add_ln176_6_fu_404_p2));
    add_ln176_1_fu_371_p2 <= std_logic_vector(unsigned(add_ln176_fu_365_p2) + unsigned(shl_ln176_3_fu_360_p2));
    add_ln176_2_fu_377_p2 <= std_logic_vector(unsigned(mul_ln176_reg_584) + unsigned(mul_ln176_1_reg_589));
    add_ln176_3_fu_381_p2 <= std_logic_vector(unsigned(add_ln176_2_fu_377_p2) + unsigned(shl_ln176_1_fu_350_p2));
    add_ln176_4_fu_413_p2 <= std_logic_vector(unsigned(add_ln176_3_reg_629_pp0_iter5_reg) + unsigned(add_ln176_1_reg_624_pp0_iter5_reg));
    add_ln176_5_fu_387_p2 <= std_logic_vector(unsigned(mul_ln176_3_reg_594) + unsigned(mul_ln176_4_reg_599));
    add_ln176_6_fu_404_p2 <= std_logic_vector(unsigned(add_ln176_5_reg_634_pp0_iter4_reg) + unsigned(mul_ln176_2_reg_644));
    add_ln176_7_fu_395_p2 <= std_logic_vector(unsigned(mul_ln176_5_reg_614) + unsigned(mul_ln176_6_reg_619));
    add_ln176_8_fu_391_p2 <= std_logic_vector(unsigned(mul_ln176_7_reg_604) + unsigned(mul_ln176_8_reg_609));
    add_ln176_9_fu_399_p2 <= std_logic_vector(unsigned(add_ln176_8_reg_639) + unsigned(add_ln176_7_fu_395_p2));
    add_ln176_fu_365_p2 <= std_logic_vector(unsigned(shl_ln176_2_fu_355_p2) + unsigned(shl_ln176_fu_345_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_V_0_vld_out, hconv_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln168_fu_210_p2, ap_enable_reg_pp0_iter7, icmp_ln178_reg_575_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln178_reg_575_pp0_iter6_reg = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (src_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_V_0_vld_out, hconv_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln168_fu_210_p2, ap_enable_reg_pp0_iter7, icmp_ln178_reg_575_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln178_reg_575_pp0_iter6_reg = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (src_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_V_0_vld_out, hconv_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln168_fu_210_p2, ap_enable_reg_pp0_iter7, icmp_ln178_reg_575_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln178_reg_575_pp0_iter6_reg = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (src_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, height_empty_n, width_empty_n)
    begin
                ap_block_state1 <= ((width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter7_assign_proc : process(hconv_V_full_n, icmp_ln178_reg_575_pp0_iter6_reg)
    begin
                ap_block_state12_pp0_stage0_iter7 <= ((icmp_ln178_reg_575_pp0_iter6_reg = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter0_assign_proc : process(src_V_0_vld_out, icmp_ln168_fu_210_p2)
    begin
                ap_block_state5_pp0_stage0_iter0 <= ((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (src_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln168_fu_210_p2)
    begin
        if ((icmp_ln168_fu_210_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_fu_165_p0 <= grp_fu_165_p00(32 - 1 downto 0);
    grp_fu_165_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_read_reg_488),64));
    grp_fu_165_p1 <= grp_fu_165_p10(32 - 1 downto 0);
    grp_fu_165_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_483),64));

    grp_fu_277_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_277_ce <= ap_const_logic_1;
        else 
            grp_fu_277_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_277_p0 <= ap_const_lv32_6F(8 - 1 downto 0);

    grp_fu_283_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_283_ce <= ap_const_logic_1;
        else 
            grp_fu_283_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_283_p0 <= ap_const_lv32_10A(10 - 1 downto 0);

    grp_fu_289_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_289_ce <= ap_const_logic_1;
        else 
            grp_fu_289_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_289_p0 <= ap_const_lv32_2D4(11 - 1 downto 0);

    grp_fu_295_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_295_ce <= ap_const_logic_1;
        else 
            grp_fu_295_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_295_p0 <= ap_const_lv32_335(11 - 1 downto 0);

    grp_fu_301_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_301_ce <= ap_const_logic_1;
        else 
            grp_fu_301_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_301_p0 <= ap_const_lv32_10A(10 - 1 downto 0);

    grp_fu_307_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_307_ce <= ap_const_logic_1;
        else 
            grp_fu_307_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_307_p0 <= ap_const_lv32_6F(8 - 1 downto 0);

    grp_fu_330_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_330_ce <= ap_const_logic_1;
        else 
            grp_fu_330_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p0 <= ap_const_lv32_2D4(11 - 1 downto 0);

    grp_fu_335_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_335_ce <= ap_const_logic_1;
        else 
            grp_fu_335_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_335_p0 <= ap_const_lv32_1F2(10 - 1 downto 0);

    grp_fu_340_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_340_ce <= ap_const_logic_1;
        else 
            grp_fu_340_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_340_p0 <= ap_const_lv32_1F2(10 - 1 downto 0);

    hconv_V_blk_n_assign_proc : process(hconv_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln178_reg_575_pp0_iter6_reg)
    begin
        if (((icmp_ln178_reg_575_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hconv_V_blk_n <= hconv_V_full_n;
        else 
            hconv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hconv_V_din <= tmp_reg_659;

    hconv_V_write_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln178_reg_575_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln178_reg_575_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            hconv_V_write <= ap_const_logic_1;
        else 
            hconv_V_write <= ap_const_logic_0;
        end if; 
    end process;


    height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, width_empty_n)
    begin
        if ((not(((width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln168_fu_210_p2 <= "1" when (indvar_flatten_reg_137 = bound_reg_504) else "0";
    icmp_ln169_fu_205_p2 <= "1" when (signed(zext_ln169_fu_201_p1) < signed(width_read_reg_488)) else "0";
    icmp_ln178_fu_313_p2 <= "1" when (unsigned(select_ln169_fu_269_p3) > unsigned(ap_const_lv11_9)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_fu_324_p2 <= std_logic_vector(unsigned(select_ln169_fu_269_p3) + unsigned(ap_const_lv11_1));
    select_ln169_fu_269_p3 <= 
        row_0_i_i_reg_148 when (icmp_ln169_fu_205_p2(0) = '1') else 
        ap_const_lv11_0;
    shl_ln176_1_fu_350_p2 <= std_logic_vector(shift_left(unsigned(hwin_1_1_i_load_reg_509_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln176_2_fu_355_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_reg_569_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln176_3_fu_360_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_reg_569_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln176_fu_345_p2 <= std_logic_vector(shift_left(unsigned(hwin_1_1_i_load_reg_509_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    src_V_0_ack_in <= src_V_0_state(1);

    src_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln168_fu_210_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_0_data_out_assign_proc : process(src_V_0_payload_A, src_V_0_payload_B, src_V_0_sel)
    begin
        if ((src_V_0_sel = ap_const_logic_1)) then 
            src_V_0_data_out <= src_V_0_payload_B;
        else 
            src_V_0_data_out <= src_V_0_payload_A;
        end if; 
    end process;

    src_V_0_load_A <= (src_V_0_state_cmp_full and not(src_V_0_sel_wr));
    src_V_0_load_B <= (src_V_0_state_cmp_full and src_V_0_sel_wr);
    src_V_0_sel <= src_V_0_sel_rd;
    src_V_0_state_cmp_full <= '0' when (src_V_0_state = ap_const_lv2_1) else '1';
    src_V_0_vld_in <= src_V_TVALID;
    src_V_0_vld_out <= src_V_0_state(0);

    src_V_TDATA_blk_n_assign_proc : process(src_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln168_fu_210_p2)
    begin
        if (((icmp_ln168_fu_210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_V_TDATA_blk_n <= src_V_0_state(0);
        else 
            src_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_V_TREADY <= src_V_0_state(1);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_417_p2 <= std_logic_vector(unsigned(add_ln176_10_reg_654) + unsigned(add_ln176_4_fu_413_p2));

    width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, width_empty_n)
    begin
        if ((not(((width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln169_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_i_i_reg_148),32));
end behav;
