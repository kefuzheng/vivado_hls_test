-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.2.0
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Border_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    dst_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_V_TVALID : OUT STD_LOGIC;
    dst_V_TREADY : IN STD_LOGIC;
    vconv_xlim_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_empty_n : IN STD_LOGIC;
    vconv_xlim_loc_read : OUT STD_LOGIC;
    vconv_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vconv_V_empty_n : IN STD_LOGIC;
    vconv_V_read : OUT STD_LOGIC );
end;


architecture behav of Loop_Border_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_FFFFFFF5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110101";
    constant ap_const_lv32_FFFFFFFA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111010";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7FB : STD_LOGIC_VECTOR (10 downto 0) := "11111111011";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_1_vld_in : STD_LOGIC;
    signal dst_V_1_vld_out : STD_LOGIC;
    signal dst_V_1_ack_in : STD_LOGIC;
    signal dst_V_1_ack_out : STD_LOGIC;
    signal dst_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_1_sel : STD_LOGIC;
    signal dst_V_1_load_A : STD_LOGIC;
    signal dst_V_1_load_B : STD_LOGIC;
    signal dst_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_1_state_cmp_full : STD_LOGIC;
    signal width_blk_n : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal dst_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln203_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_516_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln203_reg_516_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vconv_xlim_loc_blk_n : STD_LOGIC;
    signal vconv_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln203_1_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal i6_0_i_i_i_reg_159 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_0_i_i_i_reg_170 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_read_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal height_read_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal vconv_xlim_loc_read_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln217_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln217_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln224_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln224_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln207_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln207_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_511 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln203_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op63_read_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln203_reg_516_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_255_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln203_fu_271_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_reg_525 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_reg_525_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_reg_525_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_1_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_1_reg_533_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_2_fu_320_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln210_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_reg_542_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln217_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln217_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln217_reg_546_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_551_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_551_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_343_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_out_10_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal borderbuf_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal borderbuf_ce0 : STD_LOGIC;
    signal borderbuf_we0 : STD_LOGIC;
    signal borderbuf_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal borderbuf_ce1 : STD_LOGIC;
    signal borderbuf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln212_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln227_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_edge_pix_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_out_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_edge_pix_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_out_1_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln214_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_187_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln203_1_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln207_2_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_1_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln207_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln204_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln203_1_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln204_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln207_5_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_4_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_3_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln207_1_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln207_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln207_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_2_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln214_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_397_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln222_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_out_8_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_187_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_187_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component filter11x11_strm_mul_32ns_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Loop_Border_proc_borderbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    borderbuf_U : component Loop_Border_proc_borderbuf
    generic map (
        DataWidth => 32,
        AddressRange => 1910,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => borderbuf_address0,
        ce0 => borderbuf_ce0,
        we0 => borderbuf_we0,
        d0 => tmp_reg_561,
        address1 => borderbuf_address1,
        ce1 => borderbuf_ce1,
        q1 => borderbuf_q1);

    filter11x11_strm_mul_32ns_32ns_64_3_1_U42 : component filter11x11_strm_mul_32ns_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_187_p0,
        din1 => grp_fu_187_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((dst_V_1_state = ap_const_lv2_1) or ((dst_V_1_state = ap_const_lv2_3) and (dst_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dst_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dst_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_1_ack_out = ap_const_logic_1) and (dst_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_1_sel_rd <= not(dst_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dst_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_1_ack_in = ap_const_logic_1) and (dst_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_1_sel_wr <= not(dst_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dst_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_1_state = ap_const_lv2_2) and (dst_V_1_vld_in = ap_const_logic_0)) or ((dst_V_1_state = ap_const_lv2_3) and (dst_V_1_vld_in = ap_const_logic_0) and (dst_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_1_state = ap_const_lv2_1) and (dst_V_TREADY = ap_const_logic_0)) or ((dst_V_1_state = ap_const_lv2_3) and (dst_V_TREADY = ap_const_logic_0) and (dst_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_1_vld_in = ap_const_logic_0) and (dst_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_TREADY = ap_const_logic_0) and (dst_V_1_vld_in = ap_const_logic_1))) and (dst_V_1_state = ap_const_lv2_3)) or ((dst_V_1_state = ap_const_lv2_1) and (dst_V_1_ack_out = ap_const_logic_1)) or ((dst_V_1_state = ap_const_lv2_2) and (dst_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i6_0_i_i_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i6_0_i_i_i_reg_159 <= select_ln203_2_fu_320_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i6_0_i_i_i_reg_159 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_148 <= add_ln203_fu_255_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_148 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_i_i_i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_i_i_i_reg_170 <= j_fu_343_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_i_i_i_reg_170 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln207_reg_505 <= add_ln207_fu_203_p2;
                add_ln217_reg_495 <= add_ln217_fu_193_p2;
                add_ln224_reg_500 <= add_ln224_fu_198_p2;
                bound_reg_511 <= grp_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_1_load_A = ap_const_logic_1)) then
                dst_V_1_payload_A <= pix_out_10_fu_437_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_1_load_B = ap_const_logic_1)) then
                dst_V_1_payload_B <= pix_out_10_fu_437_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                height_read_reg_474 <= height_dout;
                vconv_xlim_loc_read_reg_480 <= vconv_xlim_loc_dout;
                width_read_reg_466 <= width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln203_reg_516 <= icmp_ln203_fu_250_p2;
                icmp_ln203_reg_516_pp0_iter1_reg <= icmp_ln203_reg_516;
                icmp_ln210_reg_542_pp0_iter1_reg <= icmp_ln210_reg_542;
                icmp_ln217_reg_546_pp0_iter1_reg <= icmp_ln217_reg_546;
                icmp_ln224_reg_551_pp0_iter1_reg <= icmp_ln224_reg_551;
                select_ln203_1_reg_533_pp0_iter1_reg <= select_ln203_1_reg_533;
                select_ln203_reg_525_pp0_iter1_reg <= select_ln203_reg_525;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln203_reg_516_pp0_iter2_reg <= icmp_ln203_reg_516_pp0_iter1_reg;
                icmp_ln203_reg_516_pp0_iter3_reg <= icmp_ln203_reg_516_pp0_iter2_reg;
                icmp_ln224_reg_551_pp0_iter2_reg <= icmp_ln224_reg_551_pp0_iter1_reg;
                select_ln203_reg_525_pp0_iter2_reg <= select_ln203_reg_525_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln203_1_fu_308_p3 = ap_const_lv1_1) and (icmp_ln203_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln210_reg_542 <= icmp_ln210_fu_328_p2;
                icmp_ln217_reg_546 <= icmp_ln217_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln224_reg_551 <= icmp_ln224_fu_338_p2;
                select_ln203_1_reg_533 <= select_ln203_1_fu_308_p3;
                select_ln203_reg_525 <= select_ln203_fu_271_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln203_1_reg_533_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                pix_out_1_fu_86 <= select_ln214_fu_372_p3;
                pix_out_fu_82 <= l_edge_pix_fu_380_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_reg_542 = ap_const_lv1_1) and (select_ln203_1_reg_533 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_edge_pix_fu_78 <= vconv_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op63_read_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_561 <= vconv_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, width_empty_n, height_empty_n, dst_V_TREADY, dst_V_1_state, vconv_xlim_loc_empty_n, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, icmp_ln203_fu_250_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln203_fu_250_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln203_fu_250_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((dst_V_1_state = ap_const_lv2_1) or ((dst_V_1_state = ap_const_lv2_3) and (dst_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln203_1_fu_261_p2 <= std_logic_vector(unsigned(i6_0_i_i_i_reg_159) + unsigned(ap_const_lv11_1));
    add_ln203_fu_255_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_148) + unsigned(ap_const_lv64_1));
    add_ln207_fu_203_p2 <= std_logic_vector(unsigned(height_read_reg_474) + unsigned(ap_const_lv32_FFFFFFFB));
    add_ln217_fu_193_p2 <= std_logic_vector(unsigned(width_read_reg_466) + unsigned(ap_const_lv32_FFFFFFF5));
    add_ln224_fu_198_p2 <= std_logic_vector(unsigned(width_read_reg_466) + unsigned(ap_const_lv32_FFFFFFFA));
    add_ln227_fu_397_p2 <= std_logic_vector(unsigned(select_ln203_reg_525_pp0_iter1_reg) + unsigned(ap_const_lv11_7FB));
    and_ln207_1_fu_296_p2 <= (icmp_ln207_5_fu_291_p2 and icmp_ln207_4_fu_285_p2);
    and_ln207_fu_229_p2 <= (icmp_ln207_2_fu_224_p2 and icmp_ln207_1_fu_218_p2);
    and_ln224_fu_424_p2 <= (xor_ln222_fu_418_p2 and icmp_ln224_reg_551_pp0_iter2_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(vconv_V_empty_n, ap_enable_reg_pp0_iter1, ap_predicate_op63_read_state6)
    begin
                ap_block_pp0_stage0_01001 <= ((vconv_V_empty_n = ap_const_logic_0) and (ap_predicate_op63_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(vconv_V_empty_n, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_predicate_op63_read_state6, ap_block_state8_io, ap_block_state9_io)
    begin
                ap_block_pp0_stage0_11001 <= (((vconv_V_empty_n = ap_const_logic_0) and (ap_predicate_op63_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(vconv_V_empty_n, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_predicate_op63_read_state6, ap_block_state8_io, ap_block_state9_io)
    begin
                ap_block_pp0_stage0_subdone <= (((vconv_V_empty_n = ap_const_logic_0) and (ap_predicate_op63_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, width_empty_n, height_empty_n, vconv_xlim_loc_empty_n)
    begin
                ap_block_state1 <= ((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_assign_proc : process(dst_V_TREADY, dst_V_1_state)
    begin
                ap_block_state10 <= ((dst_V_1_state = ap_const_lv2_1) or ((dst_V_1_state = ap_const_lv2_3) and (dst_V_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(vconv_V_empty_n, ap_predicate_op63_read_state6)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((vconv_V_empty_n = ap_const_logic_0) and (ap_predicate_op63_read_state6 = ap_const_boolean_1));
    end process;

        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(dst_V_1_ack_in, icmp_ln203_reg_516_pp0_iter2_reg)
    begin
                ap_block_state8_io <= ((icmp_ln203_reg_516_pp0_iter2_reg = ap_const_lv1_0) and (dst_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(dst_V_1_ack_in, icmp_ln203_reg_516_pp0_iter3_reg)
    begin
                ap_block_state9_io <= ((icmp_ln203_reg_516_pp0_iter3_reg = ap_const_lv1_0) and (dst_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln203_fu_250_p2)
    begin
        if ((icmp_ln203_fu_250_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, dst_V_TREADY, dst_V_1_state, ap_CS_fsm_state10)
    begin
        if ((not(((dst_V_1_state = ap_const_lv2_1) or ((dst_V_1_state = ap_const_lv2_3) and (dst_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op63_read_state6_assign_proc : process(select_ln203_1_reg_533, icmp_ln210_reg_542)
    begin
                ap_predicate_op63_read_state6 <= ((icmp_ln210_reg_542 = ap_const_lv1_1) and (select_ln203_1_reg_533 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(dst_V_TREADY, dst_V_1_state, ap_CS_fsm_state10)
    begin
        if ((not(((dst_V_1_state = ap_const_lv2_1) or ((dst_V_1_state = ap_const_lv2_3) and (dst_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    borderbuf_address0 <= zext_ln212_fu_354_p1(11 - 1 downto 0);
    borderbuf_address1 <= zext_ln227_fu_402_p1(11 - 1 downto 0);

    borderbuf_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            borderbuf_ce0 <= ap_const_logic_1;
        else 
            borderbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    borderbuf_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            borderbuf_ce1 <= ap_const_logic_1;
        else 
            borderbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    borderbuf_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln203_1_reg_533_pp0_iter1_reg, icmp_ln210_reg_542_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln210_reg_542_pp0_iter1_reg = ap_const_lv1_1) and (select_ln203_1_reg_533_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            borderbuf_we0 <= ap_const_logic_1;
        else 
            borderbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_1_ack_in <= dst_V_1_state(1);
    dst_V_1_ack_out <= dst_V_TREADY;

    dst_V_1_data_out_assign_proc : process(dst_V_1_payload_A, dst_V_1_payload_B, dst_V_1_sel)
    begin
        if ((dst_V_1_sel = ap_const_logic_1)) then 
            dst_V_1_data_out <= dst_V_1_payload_B;
        else 
            dst_V_1_data_out <= dst_V_1_payload_A;
        end if; 
    end process;

    dst_V_1_load_A <= (not(dst_V_1_sel_wr) and dst_V_1_state_cmp_full);
    dst_V_1_load_B <= (dst_V_1_state_cmp_full and dst_V_1_sel_wr);
    dst_V_1_sel <= dst_V_1_sel_rd;
    dst_V_1_state_cmp_full <= '0' when (dst_V_1_state = ap_const_lv2_1) else '1';

    dst_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln203_reg_516_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln203_reg_516_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_1_vld_out <= dst_V_1_state(0);
    dst_V_TDATA <= dst_V_1_data_out;

    dst_V_TDATA_blk_n_assign_proc : process(dst_V_1_state, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln203_reg_516_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln203_reg_516_pp0_iter3_reg)
    begin
        if ((((icmp_ln203_reg_516_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln203_reg_516_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            dst_V_TDATA_blk_n <= dst_V_1_state(1);
        else 
            dst_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_V_TVALID <= dst_V_1_state(0);
    grp_fu_187_p0 <= grp_fu_187_p00(32 - 1 downto 0);
    grp_fu_187_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_read_reg_466),64));
    grp_fu_187_p1 <= grp_fu_187_p10(32 - 1 downto 0);
    grp_fu_187_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_474),64));

    height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, vconv_xlim_loc_empty_n)
    begin
        if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln203_fu_250_p2 <= "1" when (indvar_flatten_reg_148 = bound_reg_511) else "0";
    icmp_ln204_fu_245_p2 <= "1" when (signed(zext_ln204_fu_241_p1) < signed(width_read_reg_466)) else "0";
    icmp_ln207_1_fu_218_p2 <= "1" when (unsigned(i6_0_i_i_i_reg_159) > unsigned(ap_const_lv11_5)) else "0";
    icmp_ln207_2_fu_224_p2 <= "1" when (signed(zext_ln203_1_fu_208_p1) < signed(add_ln207_reg_505)) else "0";
    icmp_ln207_3_fu_279_p2 <= "1" when (add_ln203_1_fu_261_p2 = ap_const_lv11_0) else "0";
    icmp_ln207_4_fu_285_p2 <= "1" when (unsigned(add_ln203_1_fu_261_p2) > unsigned(ap_const_lv11_5)) else "0";
    icmp_ln207_5_fu_291_p2 <= "1" when (signed(zext_ln203_fu_267_p1) < signed(add_ln207_reg_505)) else "0";
    icmp_ln207_fu_212_p2 <= "1" when (i6_0_i_i_i_reg_159 = ap_const_lv11_0) else "0";
    icmp_ln210_fu_328_p2 <= "1" when (signed(zext_ln203_2_fu_316_p1) < signed(vconv_xlim_loc_read_reg_480)) else "0";
    icmp_ln214_fu_367_p2 <= "1" when (select_ln203_reg_525_pp0_iter1_reg = ap_const_lv11_0) else "0";
    icmp_ln217_fu_333_p2 <= "1" when (zext_ln203_2_fu_316_p1 = add_ln217_reg_495) else "0";
    icmp_ln222_fu_413_p2 <= "1" when (unsigned(select_ln203_reg_525_pp0_iter2_reg) < unsigned(ap_const_lv11_6)) else "0";
    icmp_ln224_fu_338_p2 <= "1" when (signed(zext_ln203_2_fu_316_p1) < signed(add_ln224_reg_500)) else "0";
    j_fu_343_p2 <= std_logic_vector(unsigned(select_ln203_fu_271_p3) + unsigned(ap_const_lv11_1));
    l_edge_pix_fu_380_p3 <= 
        r_edge_pix_fu_78 when (icmp_ln217_reg_546_pp0_iter1_reg(0) = '1') else 
        pix_out_fu_82;
    or_ln207_1_fu_302_p2 <= (icmp_ln207_3_fu_279_p2 or and_ln207_1_fu_296_p2);
    or_ln207_fu_235_p2 <= (icmp_ln207_fu_212_p2 or and_ln207_fu_229_p2);
    pix_out_10_fu_437_p3 <= 
        pix_out_1_fu_86 when (icmp_ln222_fu_413_p2(0) = '1') else 
        pix_out_8_fu_429_p3;
    pix_out_8_fu_429_p3 <= 
        borderbuf_q1 when (and_ln224_fu_424_p2(0) = '1') else 
        pix_out_fu_82;
    select_ln203_1_fu_308_p3 <= 
        or_ln207_fu_235_p2 when (icmp_ln204_fu_245_p2(0) = '1') else 
        or_ln207_1_fu_302_p2;
    select_ln203_2_fu_320_p3 <= 
        i6_0_i_i_i_reg_159 when (icmp_ln204_fu_245_p2(0) = '1') else 
        add_ln203_1_fu_261_p2;
    select_ln203_fu_271_p3 <= 
        j_0_i_i_i_reg_170 when (icmp_ln204_fu_245_p2(0) = '1') else 
        ap_const_lv11_0;
    select_ln214_fu_372_p3 <= 
        r_edge_pix_fu_78 when (icmp_ln214_fu_367_p2(0) = '1') else 
        pix_out_1_fu_86;

    vconv_V_blk_n_assign_proc : process(vconv_V_empty_n, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln203_1_reg_533, icmp_ln210_reg_542)
    begin
        if (((icmp_ln210_reg_542 = ap_const_lv1_1) and (select_ln203_1_reg_533 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            vconv_V_blk_n <= vconv_V_empty_n;
        else 
            vconv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vconv_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op63_read_state6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op63_read_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vconv_V_read <= ap_const_logic_1;
        else 
            vconv_V_read <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_blk_n <= vconv_xlim_loc_empty_n;
        else 
            vconv_xlim_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vconv_xlim_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, vconv_xlim_loc_empty_n)
    begin
        if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_read <= ap_const_logic_1;
        else 
            vconv_xlim_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, vconv_xlim_loc_empty_n)
    begin
        if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln222_fu_418_p2 <= (icmp_ln222_fu_413_p2 xor ap_const_lv1_1);
    zext_ln203_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_i_i_i_reg_159),32));
    zext_ln203_2_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_fu_271_p3),32));
    zext_ln203_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_fu_261_p2),32));
    zext_ln204_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_i_reg_170),32));
    zext_ln212_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_reg_525_pp0_iter1_reg),64));
    zext_ln227_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln227_fu_397_p2),64));
end behav;
