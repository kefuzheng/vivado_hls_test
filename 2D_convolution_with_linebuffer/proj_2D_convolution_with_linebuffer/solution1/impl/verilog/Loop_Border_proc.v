// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Border_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        width_dout,
        width_empty_n,
        width_read,
        height_dout,
        height_empty_n,
        height_read,
        dst_V_TDATA,
        dst_V_TVALID,
        dst_V_TREADY,
        vconv_xlim_loc_dout,
        vconv_xlim_loc_empty_n,
        vconv_xlim_loc_read,
        vconv_V_dout,
        vconv_V_empty_n,
        vconv_V_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] width_dout;
input   width_empty_n;
output   width_read;
input  [31:0] height_dout;
input   height_empty_n;
output   height_read;
output  [31:0] dst_V_TDATA;
output   dst_V_TVALID;
input   dst_V_TREADY;
input  [31:0] vconv_xlim_loc_dout;
input   vconv_xlim_loc_empty_n;
output   vconv_xlim_loc_read;
input  [31:0] vconv_V_dout;
input   vconv_V_empty_n;
output   vconv_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg width_read;
reg height_read;
reg vconv_xlim_loc_read;
reg vconv_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] dst_V_1_data_out;
reg    dst_V_1_vld_in;
wire    dst_V_1_vld_out;
wire    dst_V_1_ack_in;
wire    dst_V_1_ack_out;
reg   [31:0] dst_V_1_payload_A;
reg   [31:0] dst_V_1_payload_B;
reg    dst_V_1_sel_rd;
reg    dst_V_1_sel_wr;
wire    dst_V_1_sel;
wire    dst_V_1_load_A;
wire    dst_V_1_load_B;
reg   [1:0] dst_V_1_state;
wire    dst_V_1_state_cmp_full;
reg    width_blk_n;
reg    height_blk_n;
reg    dst_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln203_reg_516;
reg   [0:0] icmp_ln203_reg_516_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln203_reg_516_pp0_iter3_reg;
reg    vconv_xlim_loc_blk_n;
reg    vconv_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] select_ln203_1_reg_533;
reg   [0:0] icmp_ln210_reg_542;
reg   [63:0] indvar_flatten_reg_148;
reg   [10:0] i6_0_i_i_i_reg_159;
reg   [10:0] j_0_i_i_i_reg_170;
reg   [31:0] width_read_reg_466;
reg    ap_block_state1;
reg   [31:0] height_read_reg_474;
reg   [31:0] vconv_xlim_loc_read_reg_480;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln217_fu_193_p2;
reg   [31:0] add_ln217_reg_495;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln224_fu_198_p2;
reg   [31:0] add_ln224_reg_500;
wire   [31:0] add_ln207_fu_203_p2;
reg   [31:0] add_ln207_reg_505;
wire   [63:0] grp_fu_187_p2;
reg   [63:0] bound_reg_511;
wire   [0:0] icmp_ln203_fu_250_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_predicate_op63_read_state6;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
reg    ap_block_state8_io;
wire    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln203_reg_516_pp0_iter1_reg;
wire   [63:0] add_ln203_fu_255_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] select_ln203_fu_271_p3;
reg   [10:0] select_ln203_reg_525;
reg   [10:0] select_ln203_reg_525_pp0_iter1_reg;
reg   [10:0] select_ln203_reg_525_pp0_iter2_reg;
wire   [0:0] select_ln203_1_fu_308_p3;
reg   [0:0] select_ln203_1_reg_533_pp0_iter1_reg;
wire   [10:0] select_ln203_2_fu_320_p3;
wire   [0:0] icmp_ln210_fu_328_p2;
reg   [0:0] icmp_ln210_reg_542_pp0_iter1_reg;
wire   [0:0] icmp_ln217_fu_333_p2;
reg   [0:0] icmp_ln217_reg_546;
reg   [0:0] icmp_ln217_reg_546_pp0_iter1_reg;
wire   [0:0] icmp_ln224_fu_338_p2;
reg   [0:0] icmp_ln224_reg_551;
reg   [0:0] icmp_ln224_reg_551_pp0_iter1_reg;
reg   [0:0] icmp_ln224_reg_551_pp0_iter2_reg;
wire   [10:0] j_fu_343_p2;
reg   [31:0] tmp_reg_561;
wire   [31:0] pix_out_10_fu_437_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter2;
wire   [10:0] borderbuf_address0;
reg    borderbuf_ce0;
reg    borderbuf_we0;
wire   [10:0] borderbuf_address1;
reg    borderbuf_ce1;
wire   [31:0] borderbuf_q1;
wire   [63:0] zext_ln212_fu_354_p1;
wire   [63:0] zext_ln227_fu_402_p1;
reg   [31:0] r_edge_pix_fu_78;
reg   [31:0] pix_out_fu_82;
wire   [31:0] l_edge_pix_fu_380_p3;
reg   [31:0] pix_out_1_fu_86;
wire   [31:0] select_ln214_fu_372_p3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_187_p0;
wire   [31:0] grp_fu_187_p1;
wire   [31:0] zext_ln203_1_fu_208_p1;
wire   [0:0] icmp_ln207_2_fu_224_p2;
wire   [0:0] icmp_ln207_1_fu_218_p2;
wire   [0:0] icmp_ln207_fu_212_p2;
wire   [0:0] and_ln207_fu_229_p2;
wire   [31:0] zext_ln204_fu_241_p1;
wire   [10:0] add_ln203_1_fu_261_p2;
wire   [0:0] icmp_ln204_fu_245_p2;
wire   [31:0] zext_ln203_fu_267_p1;
wire   [0:0] icmp_ln207_5_fu_291_p2;
wire   [0:0] icmp_ln207_4_fu_285_p2;
wire   [0:0] icmp_ln207_3_fu_279_p2;
wire   [0:0] and_ln207_1_fu_296_p2;
wire   [0:0] or_ln207_fu_235_p2;
wire   [0:0] or_ln207_1_fu_302_p2;
wire   [31:0] zext_ln203_2_fu_316_p1;
wire   [0:0] icmp_ln214_fu_367_p2;
wire   [10:0] add_ln227_fu_397_p2;
wire   [0:0] icmp_ln222_fu_413_p2;
wire   [0:0] xor_ln222_fu_418_p2;
wire   [0:0] and_ln224_fu_424_p2;
wire   [31:0] pix_out_8_fu_429_p3;
wire    ap_CS_fsm_state10;
reg    ap_block_state10;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_187_p00;
wire   [63:0] grp_fu_187_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 dst_V_1_sel_rd = 1'b0;
#0 dst_V_1_sel_wr = 1'b0;
#0 dst_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Loop_Border_proc_borderbuf #(
    .DataWidth( 32 ),
    .AddressRange( 1910 ),
    .AddressWidth( 11 ))
borderbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(borderbuf_address0),
    .ce0(borderbuf_ce0),
    .we0(borderbuf_we0),
    .d0(tmp_reg_561),
    .address1(borderbuf_address1),
    .ce1(borderbuf_ce1),
    .q1(borderbuf_q1)
);

filter11x11_strm_mul_32ns_32ns_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
filter11x11_strm_mul_32ns_32ns_64_3_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_187_p0),
    .din1(grp_fu_187_p1),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((dst_V_1_state == 2'd1) | ((dst_V_1_state == 2'd3) & (dst_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dst_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_1_ack_out == 1'b1) & (dst_V_1_vld_out == 1'b1))) begin
            dst_V_1_sel_rd <= ~dst_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dst_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_1_ack_in == 1'b1) & (dst_V_1_vld_in == 1'b1))) begin
            dst_V_1_sel_wr <= ~dst_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dst_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_1_state == 2'd2) & (dst_V_1_vld_in == 1'b0)) | ((dst_V_1_state == 2'd3) & (dst_V_1_vld_in == 1'b0) & (dst_V_1_ack_out == 1'b1)))) begin
            dst_V_1_state <= 2'd2;
        end else if ((((dst_V_1_state == 2'd1) & (dst_V_TREADY == 1'b0)) | ((dst_V_1_state == 2'd3) & (dst_V_TREADY == 1'b0) & (dst_V_1_vld_in == 1'b1)))) begin
            dst_V_1_state <= 2'd1;
        end else if (((~((dst_V_1_vld_in == 1'b0) & (dst_V_1_ack_out == 1'b1)) & ~((dst_V_TREADY == 1'b0) & (dst_V_1_vld_in == 1'b1)) & (dst_V_1_state == 2'd3)) | ((dst_V_1_state == 2'd1) & (dst_V_1_ack_out == 1'b1)) | ((dst_V_1_state == 2'd2) & (dst_V_1_vld_in == 1'b1)))) begin
            dst_V_1_state <= 2'd3;
        end else begin
            dst_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i6_0_i_i_i_reg_159 <= select_ln203_2_fu_320_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i6_0_i_i_i_reg_159 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_148 <= add_ln203_fu_255_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_148 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_i_i_i_reg_170 <= j_fu_343_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_i_i_i_reg_170 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln207_reg_505 <= add_ln207_fu_203_p2;
        add_ln217_reg_495 <= add_ln217_fu_193_p2;
        add_ln224_reg_500 <= add_ln224_fu_198_p2;
        bound_reg_511 <= grp_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_1_load_A == 1'b1)) begin
        dst_V_1_payload_A <= pix_out_10_fu_437_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_1_load_B == 1'b1)) begin
        dst_V_1_payload_B <= pix_out_10_fu_437_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read_reg_474 <= height_dout;
        vconv_xlim_loc_read_reg_480 <= vconv_xlim_loc_dout;
        width_read_reg_466 <= width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln203_reg_516 <= icmp_ln203_fu_250_p2;
        icmp_ln203_reg_516_pp0_iter1_reg <= icmp_ln203_reg_516;
        icmp_ln210_reg_542_pp0_iter1_reg <= icmp_ln210_reg_542;
        icmp_ln217_reg_546_pp0_iter1_reg <= icmp_ln217_reg_546;
        icmp_ln224_reg_551_pp0_iter1_reg <= icmp_ln224_reg_551;
        select_ln203_1_reg_533_pp0_iter1_reg <= select_ln203_1_reg_533;
        select_ln203_reg_525_pp0_iter1_reg <= select_ln203_reg_525;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln203_reg_516_pp0_iter2_reg <= icmp_ln203_reg_516_pp0_iter1_reg;
        icmp_ln203_reg_516_pp0_iter3_reg <= icmp_ln203_reg_516_pp0_iter2_reg;
        icmp_ln224_reg_551_pp0_iter2_reg <= icmp_ln224_reg_551_pp0_iter1_reg;
        select_ln203_reg_525_pp0_iter2_reg <= select_ln203_reg_525_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln203_1_fu_308_p3 == 1'd1) & (icmp_ln203_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln210_reg_542 <= icmp_ln210_fu_328_p2;
        icmp_ln217_reg_546 <= icmp_ln217_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln224_reg_551 <= icmp_ln224_fu_338_p2;
        select_ln203_1_reg_533 <= select_ln203_1_fu_308_p3;
        select_ln203_reg_525 <= select_ln203_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln203_1_reg_533_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pix_out_1_fu_86 <= select_ln214_fu_372_p3;
        pix_out_fu_82 <= l_edge_pix_fu_380_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln210_reg_542 == 1'd1) & (select_ln203_1_reg_533 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_edge_pix_fu_78 <= vconv_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op63_read_state6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_561 <= vconv_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln203_fu_250_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((dst_V_1_state == 2'd1) | ((dst_V_1_state == 2'd3) & (dst_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((dst_V_1_state == 2'd1) | ((dst_V_1_state == 2'd3) & (dst_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        borderbuf_ce0 = 1'b1;
    end else begin
        borderbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        borderbuf_ce1 = 1'b1;
    end else begin
        borderbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln210_reg_542_pp0_iter1_reg == 1'd1) & (select_ln203_1_reg_533_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        borderbuf_we0 = 1'b1;
    end else begin
        borderbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_1_sel == 1'b1)) begin
        dst_V_1_data_out = dst_V_1_payload_B;
    end else begin
        dst_V_1_data_out = dst_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln203_reg_516_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_V_1_vld_in = 1'b1;
    end else begin
        dst_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln203_reg_516_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln203_reg_516_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        dst_V_TDATA_blk_n = dst_V_1_state[1'd1];
    end else begin
        dst_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln210_reg_542 == 1'd1) & (select_ln203_1_reg_533 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        vconv_V_blk_n = vconv_V_empty_n;
    end else begin
        vconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_read_state6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vconv_V_read = 1'b1;
    end else begin
        vconv_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_blk_n = vconv_xlim_loc_empty_n;
    end else begin
        vconv_xlim_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_read = 1'b1;
    end else begin
        vconv_xlim_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln203_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln203_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((dst_V_1_state == 2'd1) | ((dst_V_1_state == 2'd3) & (dst_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_1_fu_261_p2 = (i6_0_i_i_i_reg_159 + 11'd1);

assign add_ln203_fu_255_p2 = (indvar_flatten_reg_148 + 64'd1);

assign add_ln207_fu_203_p2 = ($signed(height_read_reg_474) + $signed(32'd4294967291));

assign add_ln217_fu_193_p2 = ($signed(width_read_reg_466) + $signed(32'd4294967285));

assign add_ln224_fu_198_p2 = ($signed(width_read_reg_466) + $signed(32'd4294967290));

assign add_ln227_fu_397_p2 = ($signed(select_ln203_reg_525_pp0_iter1_reg) + $signed(11'd2043));

assign and_ln207_1_fu_296_p2 = (icmp_ln207_5_fu_291_p2 & icmp_ln207_4_fu_285_p2);

assign and_ln207_fu_229_p2 = (icmp_ln207_2_fu_224_p2 & icmp_ln207_1_fu_218_p2);

assign and_ln224_fu_424_p2 = (xor_ln222_fu_418_p2 & icmp_ln224_reg_551_pp0_iter2_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((vconv_V_empty_n == 1'b0) & (ap_predicate_op63_read_state6 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((vconv_V_empty_n == 1'b0) & (ap_predicate_op63_read_state6 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((vconv_V_empty_n == 1'b0) & (ap_predicate_op63_read_state6 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((height_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_start == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10 = ((dst_V_1_state == 2'd1) | ((dst_V_1_state == 2'd3) & (dst_V_TREADY == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((vconv_V_empty_n == 1'b0) & (ap_predicate_op63_read_state6 == 1'b1));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln203_reg_516_pp0_iter2_reg == 1'd0) & (dst_V_1_ack_in == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((icmp_ln203_reg_516_pp0_iter3_reg == 1'd0) & (dst_V_1_ack_in == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op63_read_state6 = ((icmp_ln210_reg_542 == 1'd1) & (select_ln203_1_reg_533 == 1'd1));
end

assign borderbuf_address0 = zext_ln212_fu_354_p1;

assign borderbuf_address1 = zext_ln227_fu_402_p1;

assign dst_V_1_ack_in = dst_V_1_state[1'd1];

assign dst_V_1_ack_out = dst_V_TREADY;

assign dst_V_1_load_A = (~dst_V_1_sel_wr & dst_V_1_state_cmp_full);

assign dst_V_1_load_B = (dst_V_1_state_cmp_full & dst_V_1_sel_wr);

assign dst_V_1_sel = dst_V_1_sel_rd;

assign dst_V_1_state_cmp_full = ((dst_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_1_vld_out = dst_V_1_state[1'd0];

assign dst_V_TDATA = dst_V_1_data_out;

assign dst_V_TVALID = dst_V_1_state[1'd0];

assign grp_fu_187_p0 = grp_fu_187_p00;

assign grp_fu_187_p00 = width_read_reg_466;

assign grp_fu_187_p1 = grp_fu_187_p10;

assign grp_fu_187_p10 = height_read_reg_474;

assign icmp_ln203_fu_250_p2 = ((indvar_flatten_reg_148 == bound_reg_511) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_245_p2 = (($signed(zext_ln204_fu_241_p1) < $signed(width_read_reg_466)) ? 1'b1 : 1'b0);

assign icmp_ln207_1_fu_218_p2 = ((i6_0_i_i_i_reg_159 > 11'd5) ? 1'b1 : 1'b0);

assign icmp_ln207_2_fu_224_p2 = (($signed(zext_ln203_1_fu_208_p1) < $signed(add_ln207_reg_505)) ? 1'b1 : 1'b0);

assign icmp_ln207_3_fu_279_p2 = ((add_ln203_1_fu_261_p2 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln207_4_fu_285_p2 = ((add_ln203_1_fu_261_p2 > 11'd5) ? 1'b1 : 1'b0);

assign icmp_ln207_5_fu_291_p2 = (($signed(zext_ln203_fu_267_p1) < $signed(add_ln207_reg_505)) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_212_p2 = ((i6_0_i_i_i_reg_159 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln210_fu_328_p2 = (($signed(zext_ln203_2_fu_316_p1) < $signed(vconv_xlim_loc_read_reg_480)) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_367_p2 = ((select_ln203_reg_525_pp0_iter1_reg == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_333_p2 = ((zext_ln203_2_fu_316_p1 == add_ln217_reg_495) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_413_p2 = ((select_ln203_reg_525_pp0_iter2_reg < 11'd6) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_338_p2 = (($signed(zext_ln203_2_fu_316_p1) < $signed(add_ln224_reg_500)) ? 1'b1 : 1'b0);

assign j_fu_343_p2 = (select_ln203_fu_271_p3 + 11'd1);

assign l_edge_pix_fu_380_p3 = ((icmp_ln217_reg_546_pp0_iter1_reg[0:0] === 1'b1) ? r_edge_pix_fu_78 : pix_out_fu_82);

assign or_ln207_1_fu_302_p2 = (icmp_ln207_3_fu_279_p2 | and_ln207_1_fu_296_p2);

assign or_ln207_fu_235_p2 = (icmp_ln207_fu_212_p2 | and_ln207_fu_229_p2);

assign pix_out_10_fu_437_p3 = ((icmp_ln222_fu_413_p2[0:0] === 1'b1) ? pix_out_1_fu_86 : pix_out_8_fu_429_p3);

assign pix_out_8_fu_429_p3 = ((and_ln224_fu_424_p2[0:0] === 1'b1) ? borderbuf_q1 : pix_out_fu_82);

assign select_ln203_1_fu_308_p3 = ((icmp_ln204_fu_245_p2[0:0] === 1'b1) ? or_ln207_fu_235_p2 : or_ln207_1_fu_302_p2);

assign select_ln203_2_fu_320_p3 = ((icmp_ln204_fu_245_p2[0:0] === 1'b1) ? i6_0_i_i_i_reg_159 : add_ln203_1_fu_261_p2);

assign select_ln203_fu_271_p3 = ((icmp_ln204_fu_245_p2[0:0] === 1'b1) ? j_0_i_i_i_reg_170 : 11'd0);

assign select_ln214_fu_372_p3 = ((icmp_ln214_fu_367_p2[0:0] === 1'b1) ? r_edge_pix_fu_78 : pix_out_1_fu_86);

assign xor_ln222_fu_418_p2 = (icmp_ln222_fu_413_p2 ^ 1'd1);

assign zext_ln203_1_fu_208_p1 = i6_0_i_i_i_reg_159;

assign zext_ln203_2_fu_316_p1 = select_ln203_fu_271_p3;

assign zext_ln203_fu_267_p1 = add_ln203_1_fu_261_p2;

assign zext_ln204_fu_241_p1 = j_0_i_i_i_reg_170;

assign zext_ln212_fu_354_p1 = select_ln203_reg_525_pp0_iter1_reg;

assign zext_ln227_fu_402_p1 = add_ln227_fu_397_p2;

endmodule //Loop_Border_proc
