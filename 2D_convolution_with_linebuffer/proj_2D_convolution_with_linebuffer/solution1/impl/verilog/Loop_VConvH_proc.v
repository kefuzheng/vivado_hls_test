// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_VConvH_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        height_dout,
        height_empty_n,
        height_read,
        vconv_xlim_loc_dout,
        vconv_xlim_loc_empty_n,
        vconv_xlim_loc_read,
        hconv_V_dout,
        hconv_V_empty_n,
        hconv_V_read,
        vconv_V_din,
        vconv_V_full_n,
        vconv_V_write,
        height_out_din,
        height_out_full_n,
        height_out_write,
        vconv_xlim_loc_out_din,
        vconv_xlim_loc_out_full_n,
        vconv_xlim_loc_out_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state16 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] height_dout;
input   height_empty_n;
output   height_read;
input  [31:0] vconv_xlim_loc_dout;
input   vconv_xlim_loc_empty_n;
output   vconv_xlim_loc_read;
input  [31:0] hconv_V_dout;
input   hconv_V_empty_n;
output   hconv_V_read;
output  [31:0] vconv_V_din;
input   vconv_V_full_n;
output   vconv_V_write;
output  [31:0] height_out_din;
input   height_out_full_n;
output   height_out_write;
output  [31:0] vconv_xlim_loc_out_din;
input   vconv_xlim_loc_out_full_n;
output   vconv_xlim_loc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg height_read;
reg vconv_xlim_loc_read;
reg hconv_V_read;
reg vconv_V_write;
reg height_out_write;
reg vconv_xlim_loc_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] linebuf_0_address0;
reg    linebuf_0_ce0;
wire   [31:0] linebuf_0_q0;
wire   [10:0] linebuf_0_address1;
reg    linebuf_0_ce1;
reg    linebuf_0_we1;
wire   [10:0] linebuf_1_address0;
reg    linebuf_1_ce0;
wire   [31:0] linebuf_1_q0;
wire   [10:0] linebuf_1_address1;
reg    linebuf_1_ce1;
reg    linebuf_1_we1;
wire   [10:0] linebuf_2_address0;
reg    linebuf_2_ce0;
wire   [31:0] linebuf_2_q0;
wire   [10:0] linebuf_2_address1;
reg    linebuf_2_ce1;
reg    linebuf_2_we1;
wire   [10:0] linebuf_3_address0;
reg    linebuf_3_ce0;
wire   [31:0] linebuf_3_q0;
wire   [10:0] linebuf_3_address1;
reg    linebuf_3_ce1;
reg    linebuf_3_we1;
wire   [10:0] linebuf_4_address0;
reg    linebuf_4_ce0;
wire   [31:0] linebuf_4_q0;
wire   [10:0] linebuf_4_address1;
reg    linebuf_4_ce1;
reg    linebuf_4_we1;
wire   [10:0] linebuf_5_address0;
reg    linebuf_5_ce0;
wire   [31:0] linebuf_5_q0;
wire   [10:0] linebuf_5_address1;
reg    linebuf_5_ce1;
reg    linebuf_5_we1;
wire   [10:0] linebuf_6_address0;
reg    linebuf_6_ce0;
wire   [31:0] linebuf_6_q0;
wire   [10:0] linebuf_6_address1;
reg    linebuf_6_ce1;
reg    linebuf_6_we1;
wire   [10:0] linebuf_7_address0;
reg    linebuf_7_ce0;
wire   [31:0] linebuf_7_q0;
wire   [10:0] linebuf_7_address1;
reg    linebuf_7_ce1;
reg    linebuf_7_we1;
wire   [10:0] linebuf_8_address0;
reg    linebuf_8_ce0;
wire   [31:0] linebuf_8_q0;
wire   [10:0] linebuf_8_address1;
reg    linebuf_8_ce1;
reg    linebuf_8_we1;
wire   [10:0] linebuf_9_address0;
reg    linebuf_9_ce0;
wire   [31:0] linebuf_9_q0;
wire   [10:0] linebuf_9_address1;
reg    linebuf_9_ce1;
reg    linebuf_9_we1;
reg    height_blk_n;
reg    vconv_xlim_loc_blk_n;
reg    hconv_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln185_reg_582;
reg    vconv_V_blk_n;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] select_ln185_1_reg_596;
reg   [0:0] select_ln185_1_reg_596_pp0_iter9_reg;
reg    height_out_blk_n;
reg    vconv_xlim_loc_out_blk_n;
reg   [63:0] indvar_flatten_reg_308;
reg   [10:0] col1_0_i_i_i_reg_319;
reg   [10:0] row2_0_i_i_i_reg_330;
reg   [31:0] height_read_reg_556;
reg    ap_block_state1;
reg   [31:0] vconv_xlim_loc_read_reg_561;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_347_p2;
reg   [63:0] bound_reg_577;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln185_fu_362_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
reg    ap_block_state15_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln185_reg_582_pp0_iter1_reg;
reg   [0:0] icmp_ln185_reg_582_pp0_iter2_reg;
reg   [0:0] icmp_ln185_reg_582_pp0_iter3_reg;
reg   [0:0] icmp_ln185_reg_582_pp0_iter4_reg;
reg   [0:0] icmp_ln185_reg_582_pp0_iter5_reg;
reg   [0:0] icmp_ln185_reg_582_pp0_iter6_reg;
reg   [0:0] icmp_ln185_reg_582_pp0_iter7_reg;
reg   [0:0] icmp_ln185_reg_582_pp0_iter8_reg;
wire   [63:0] add_ln185_fu_367_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] select_ln185_fu_373_p3;
reg   [10:0] select_ln185_reg_591;
wire   [0:0] select_ln185_1_fu_399_p3;
reg   [0:0] select_ln185_1_reg_596_pp0_iter1_reg;
reg   [0:0] select_ln185_1_reg_596_pp0_iter2_reg;
reg   [0:0] select_ln185_1_reg_596_pp0_iter3_reg;
reg   [0:0] select_ln185_1_reg_596_pp0_iter4_reg;
reg   [0:0] select_ln185_1_reg_596_pp0_iter5_reg;
reg   [0:0] select_ln185_1_reg_596_pp0_iter6_reg;
reg   [0:0] select_ln185_1_reg_596_pp0_iter7_reg;
reg   [0:0] select_ln185_1_reg_596_pp0_iter8_reg;
wire   [10:0] select_ln185_2_fu_407_p3;
wire   [10:0] row_fu_415_p2;
reg   [31:0] tmp_1_reg_610;
reg   [31:0] tmp_1_reg_610_pp0_iter2_reg;
reg   [31:0] tmp_1_reg_610_pp0_iter3_reg;
reg   [31:0] tmp_1_reg_610_pp0_iter4_reg;
reg   [31:0] tmp_1_reg_610_pp0_iter5_reg;
reg   [10:0] linebuf_0_addr_reg_617;
reg   [10:0] linebuf_0_addr_reg_617_pp0_iter2_reg;
reg   [10:0] linebuf_1_addr_reg_623;
reg   [10:0] linebuf_1_addr_reg_623_pp0_iter2_reg;
reg   [10:0] linebuf_2_addr_reg_629;
reg   [10:0] linebuf_2_addr_reg_629_pp0_iter2_reg;
reg   [10:0] linebuf_3_addr_reg_635;
reg   [10:0] linebuf_3_addr_reg_635_pp0_iter2_reg;
reg   [10:0] linebuf_4_addr_reg_641;
reg   [10:0] linebuf_4_addr_reg_641_pp0_iter2_reg;
reg   [10:0] linebuf_5_addr_reg_647;
reg   [10:0] linebuf_5_addr_reg_647_pp0_iter2_reg;
reg   [10:0] linebuf_6_addr_reg_653;
reg   [10:0] linebuf_6_addr_reg_653_pp0_iter2_reg;
reg   [10:0] linebuf_7_addr_reg_659;
reg   [10:0] linebuf_7_addr_reg_659_pp0_iter2_reg;
reg   [10:0] linebuf_8_addr_reg_665;
reg   [10:0] linebuf_8_addr_reg_665_pp0_iter2_reg;
reg   [10:0] linebuf_9_addr_reg_671;
reg   [31:0] linebuf_1_load_reg_677;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] linebuf_2_load_reg_683;
reg   [31:0] linebuf_3_load_reg_689;
reg  signed [31:0] linebuf_3_load_reg_689_pp0_iter3_reg;
reg  signed [31:0] linebuf_3_load_reg_689_pp0_iter4_reg;
reg   [31:0] linebuf_4_load_reg_695;
reg   [31:0] linebuf_5_load_reg_701;
reg   [31:0] linebuf_6_load_reg_707;
reg  signed [31:0] linebuf_6_load_reg_707_pp0_iter3_reg;
reg   [31:0] linebuf_7_load_reg_713;
reg  signed [31:0] linebuf_7_load_reg_713_pp0_iter3_reg;
reg   [31:0] linebuf_8_load_reg_719;
reg   [31:0] linebuf_9_load_reg_725;
reg   [31:0] linebuf_0_load_reg_731;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] linebuf_0_load_reg_731_pp0_iter4_reg;
reg   [31:0] linebuf_0_load_reg_731_pp0_iter5_reg;
wire   [31:0] grp_fu_434_p2;
reg   [31:0] mul_ln194_reg_737;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] mul_ln194_1_reg_742;
wire   [31:0] grp_fu_444_p2;
reg   [31:0] mul_ln194_3_reg_747;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] mul_ln194_4_reg_752;
wire   [31:0] grp_fu_454_p2;
reg   [31:0] mul_ln194_7_reg_757;
wire   [31:0] grp_fu_459_p2;
reg   [31:0] mul_ln194_8_reg_762;
wire   [31:0] grp_fu_464_p2;
reg   [31:0] mul_ln194_5_reg_767;
wire   [31:0] grp_fu_469_p2;
reg   [31:0] mul_ln194_6_reg_772;
wire   [31:0] add_ln194_1_fu_505_p2;
reg   [31:0] add_ln194_1_reg_777;
reg   [31:0] add_ln194_1_reg_777_pp0_iter7_reg;
reg   [31:0] add_ln194_1_reg_777_pp0_iter8_reg;
wire   [31:0] add_ln194_3_fu_515_p2;
reg   [31:0] add_ln194_3_reg_782;
reg   [31:0] add_ln194_3_reg_782_pp0_iter7_reg;
reg   [31:0] add_ln194_3_reg_782_pp0_iter8_reg;
wire   [31:0] add_ln194_5_fu_521_p2;
reg   [31:0] add_ln194_5_reg_787;
reg   [31:0] add_ln194_5_reg_787_pp0_iter7_reg;
wire   [31:0] add_ln194_8_fu_525_p2;
reg   [31:0] add_ln194_8_reg_792;
wire   [31:0] grp_fu_474_p2;
reg   [31:0] mul_ln194_2_reg_797;
wire   [31:0] add_ln194_9_fu_533_p2;
reg   [31:0] add_ln194_9_reg_802;
wire   [31:0] add_ln194_10_fu_542_p2;
reg   [31:0] add_ln194_10_reg_807;
wire   [31:0] tmp_fu_551_p2;
reg   [31:0] tmp_reg_812;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire   [63:0] zext_ln193_fu_421_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_347_p0;
wire   [31:0] grp_fu_347_p1;
wire   [31:0] zext_ln186_fu_353_p1;
wire   [0:0] icmp_ln186_fu_357_p2;
wire   [10:0] add_ln185_1_fu_381_p2;
wire   [0:0] icmp_ln198_1_fu_393_p2;
wire   [0:0] icmp_ln198_fu_387_p2;
wire   [7:0] grp_fu_434_p0;
wire   [9:0] grp_fu_439_p0;
wire   [10:0] grp_fu_444_p0;
wire   [10:0] grp_fu_449_p0;
wire   [9:0] grp_fu_454_p0;
wire   [7:0] grp_fu_459_p0;
wire   [10:0] grp_fu_464_p0;
wire   [9:0] grp_fu_469_p0;
wire   [9:0] grp_fu_474_p0;
wire   [31:0] shl_ln194_2_fu_489_p2;
wire   [31:0] shl_ln194_fu_479_p2;
wire   [31:0] add_ln194_fu_499_p2;
wire   [31:0] shl_ln194_3_fu_494_p2;
wire   [31:0] add_ln194_2_fu_511_p2;
wire   [31:0] shl_ln194_1_fu_484_p2;
wire   [31:0] add_ln194_7_fu_529_p2;
wire   [31:0] add_ln194_6_fu_538_p2;
wire   [31:0] add_ln194_4_fu_547_p2;
reg    grp_fu_434_ce;
reg    grp_fu_439_ce;
reg    grp_fu_444_ce;
reg    grp_fu_449_ce;
reg    grp_fu_454_ce;
reg    grp_fu_459_ce;
reg    grp_fu_464_ce;
reg    grp_fu_469_ce;
reg    grp_fu_474_ce;
wire    ap_CS_fsm_state16;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_53;
reg    ap_enable_state6_pp0_iter1_stage0;
reg    ap_enable_operation_71;
reg    ap_enable_state7_pp0_iter2_stage0;
reg    ap_enable_operation_85;
reg    ap_enable_state8_pp0_iter3_stage0;
reg    ap_enable_operation_55;
reg    ap_enable_operation_72;
reg    ap_enable_operation_86;
reg    ap_enable_operation_57;
reg    ap_enable_operation_73;
reg    ap_enable_operation_88;
reg    ap_enable_operation_59;
reg    ap_enable_operation_74;
reg    ap_enable_operation_90;
reg    ap_enable_operation_61;
reg    ap_enable_operation_75;
reg    ap_enable_operation_91;
reg    ap_enable_operation_63;
reg    ap_enable_operation_76;
reg    ap_enable_operation_92;
reg    ap_enable_operation_65;
reg    ap_enable_operation_77;
reg    ap_enable_operation_94;
reg    ap_enable_operation_67;
reg    ap_enable_operation_78;
reg    ap_enable_operation_96;
reg    ap_enable_operation_69;
reg    ap_enable_operation_79;
reg    ap_enable_operation_80;
reg    ap_enable_operation_70;
reg    ap_enable_operation_81;
reg    ap_enable_operation_83;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_347_p00;
wire   [63:0] grp_fu_347_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_0_address0),
    .ce0(linebuf_0_ce0),
    .q0(linebuf_0_q0),
    .address1(linebuf_0_address1),
    .ce1(linebuf_0_ce1),
    .we1(linebuf_0_we1),
    .d1(linebuf_1_load_reg_677)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_1_address0),
    .ce0(linebuf_1_ce0),
    .q0(linebuf_1_q0),
    .address1(linebuf_1_address1),
    .ce1(linebuf_1_ce1),
    .we1(linebuf_1_we1),
    .d1(linebuf_2_load_reg_683)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_2_address0),
    .ce0(linebuf_2_ce0),
    .q0(linebuf_2_q0),
    .address1(linebuf_2_address1),
    .ce1(linebuf_2_ce1),
    .we1(linebuf_2_we1),
    .d1(linebuf_3_load_reg_689)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_3_address0),
    .ce0(linebuf_3_ce0),
    .q0(linebuf_3_q0),
    .address1(linebuf_3_address1),
    .ce1(linebuf_3_ce1),
    .we1(linebuf_3_we1),
    .d1(linebuf_4_load_reg_695)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_4_address0),
    .ce0(linebuf_4_ce0),
    .q0(linebuf_4_q0),
    .address1(linebuf_4_address1),
    .ce1(linebuf_4_ce1),
    .we1(linebuf_4_we1),
    .d1(linebuf_5_load_reg_701)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_5_address0),
    .ce0(linebuf_5_ce0),
    .q0(linebuf_5_q0),
    .address1(linebuf_5_address1),
    .ce1(linebuf_5_ce1),
    .we1(linebuf_5_we1),
    .d1(linebuf_6_load_reg_707)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_6_address0),
    .ce0(linebuf_6_ce0),
    .q0(linebuf_6_q0),
    .address1(linebuf_6_address1),
    .ce1(linebuf_6_ce1),
    .we1(linebuf_6_we1),
    .d1(linebuf_7_load_reg_713)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_7_address0),
    .ce0(linebuf_7_ce0),
    .q0(linebuf_7_q0),
    .address1(linebuf_7_address1),
    .ce1(linebuf_7_ce1),
    .we1(linebuf_7_we1),
    .d1(linebuf_8_load_reg_719)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_8_address0),
    .ce0(linebuf_8_ce0),
    .q0(linebuf_8_q0),
    .address1(linebuf_8_address1),
    .ce1(linebuf_8_ce1),
    .we1(linebuf_8_we1),
    .d1(linebuf_9_load_reg_725)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_9_address0),
    .ce0(linebuf_9_ce0),
    .q0(linebuf_9_q0),
    .address1(linebuf_9_address1),
    .ce1(linebuf_9_ce1),
    .we1(linebuf_9_we1),
    .d1(tmp_1_reg_610)
);

filter11x11_strm_mul_32ns_32ns_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
filter11x11_strm_mul_32ns_32ns_64_3_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_347_p0),
    .din1(grp_fu_347_p1),
    .ce(1'b1),
    .dout(grp_fu_347_p2)
);

filter11x11_strm_mul_8ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_8ns_32s_32_3_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_434_p0),
    .din1(linebuf_1_load_reg_677),
    .ce(grp_fu_434_ce),
    .dout(grp_fu_434_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_439_p0),
    .din1(linebuf_2_load_reg_683),
    .ce(grp_fu_439_ce),
    .dout(grp_fu_439_p2)
);

filter11x11_strm_mul_11ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_11ns_32s_32_3_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_444_p0),
    .din1(linebuf_4_load_reg_695),
    .ce(grp_fu_444_ce),
    .dout(grp_fu_444_p2)
);

filter11x11_strm_mul_11ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_11ns_32s_32_3_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_449_p0),
    .din1(linebuf_5_load_reg_701),
    .ce(grp_fu_449_ce),
    .dout(grp_fu_449_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_454_p0),
    .din1(linebuf_8_load_reg_719),
    .ce(grp_fu_454_ce),
    .dout(grp_fu_454_p2)
);

filter11x11_strm_mul_8ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_8ns_32s_32_3_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_459_p0),
    .din1(linebuf_9_load_reg_725),
    .ce(grp_fu_459_ce),
    .dout(grp_fu_459_p2)
);

filter11x11_strm_mul_11ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_11ns_32s_32_3_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_464_p0),
    .din1(linebuf_6_load_reg_707_pp0_iter3_reg),
    .ce(grp_fu_464_ce),
    .dout(grp_fu_464_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_469_p0),
    .din1(linebuf_7_load_reg_713_pp0_iter3_reg),
    .ce(grp_fu_469_ce),
    .dout(grp_fu_469_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_474_p0),
    .din1(linebuf_3_load_reg_689_pp0_iter4_reg),
    .ce(grp_fu_474_ce),
    .dout(grp_fu_474_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_362_p2 == 1'd0))) begin
        col1_0_i_i_i_reg_319 <= select_ln185_2_fu_407_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        col1_0_i_i_i_reg_319 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_362_p2 == 1'd0))) begin
        indvar_flatten_reg_308 <= add_ln185_fu_367_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_308 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_362_p2 == 1'd0))) begin
        row2_0_i_i_i_reg_330 <= row_fu_415_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        row2_0_i_i_i_reg_330 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_582_pp0_iter7_reg == 1'd0))) begin
        add_ln194_10_reg_807 <= add_ln194_10_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_582_pp0_iter5_reg == 1'd0))) begin
        add_ln194_1_reg_777[31 : 2] <= add_ln194_1_fu_505_p2[31 : 2];
        add_ln194_3_reg_782 <= add_ln194_3_fu_515_p2;
        add_ln194_5_reg_787 <= add_ln194_5_fu_521_p2;
        add_ln194_8_reg_792 <= add_ln194_8_fu_525_p2;
        mul_ln194_5_reg_767 <= grp_fu_464_p2;
        mul_ln194_6_reg_772 <= grp_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln194_1_reg_777_pp0_iter7_reg[31 : 2] <= add_ln194_1_reg_777[31 : 2];
        add_ln194_1_reg_777_pp0_iter8_reg[31 : 2] <= add_ln194_1_reg_777_pp0_iter7_reg[31 : 2];
        add_ln194_3_reg_782_pp0_iter7_reg <= add_ln194_3_reg_782;
        add_ln194_3_reg_782_pp0_iter8_reg <= add_ln194_3_reg_782_pp0_iter7_reg;
        add_ln194_5_reg_787_pp0_iter7_reg <= add_ln194_5_reg_787;
        icmp_ln185_reg_582_pp0_iter2_reg <= icmp_ln185_reg_582_pp0_iter1_reg;
        icmp_ln185_reg_582_pp0_iter3_reg <= icmp_ln185_reg_582_pp0_iter2_reg;
        icmp_ln185_reg_582_pp0_iter4_reg <= icmp_ln185_reg_582_pp0_iter3_reg;
        icmp_ln185_reg_582_pp0_iter5_reg <= icmp_ln185_reg_582_pp0_iter4_reg;
        icmp_ln185_reg_582_pp0_iter6_reg <= icmp_ln185_reg_582_pp0_iter5_reg;
        icmp_ln185_reg_582_pp0_iter7_reg <= icmp_ln185_reg_582_pp0_iter6_reg;
        icmp_ln185_reg_582_pp0_iter8_reg <= icmp_ln185_reg_582_pp0_iter7_reg;
        linebuf_0_addr_reg_617_pp0_iter2_reg <= linebuf_0_addr_reg_617;
        linebuf_0_load_reg_731_pp0_iter4_reg <= linebuf_0_load_reg_731;
        linebuf_0_load_reg_731_pp0_iter5_reg <= linebuf_0_load_reg_731_pp0_iter4_reg;
        linebuf_1_addr_reg_623_pp0_iter2_reg <= linebuf_1_addr_reg_623;
        linebuf_2_addr_reg_629_pp0_iter2_reg <= linebuf_2_addr_reg_629;
        linebuf_3_addr_reg_635_pp0_iter2_reg <= linebuf_3_addr_reg_635;
        linebuf_3_load_reg_689_pp0_iter3_reg <= linebuf_3_load_reg_689;
        linebuf_3_load_reg_689_pp0_iter4_reg <= linebuf_3_load_reg_689_pp0_iter3_reg;
        linebuf_4_addr_reg_641_pp0_iter2_reg <= linebuf_4_addr_reg_641;
        linebuf_5_addr_reg_647_pp0_iter2_reg <= linebuf_5_addr_reg_647;
        linebuf_6_addr_reg_653_pp0_iter2_reg <= linebuf_6_addr_reg_653;
        linebuf_6_load_reg_707_pp0_iter3_reg <= linebuf_6_load_reg_707;
        linebuf_7_addr_reg_659_pp0_iter2_reg <= linebuf_7_addr_reg_659;
        linebuf_7_load_reg_713_pp0_iter3_reg <= linebuf_7_load_reg_713;
        linebuf_8_addr_reg_665_pp0_iter2_reg <= linebuf_8_addr_reg_665;
        select_ln185_1_reg_596_pp0_iter2_reg <= select_ln185_1_reg_596_pp0_iter1_reg;
        select_ln185_1_reg_596_pp0_iter3_reg <= select_ln185_1_reg_596_pp0_iter2_reg;
        select_ln185_1_reg_596_pp0_iter4_reg <= select_ln185_1_reg_596_pp0_iter3_reg;
        select_ln185_1_reg_596_pp0_iter5_reg <= select_ln185_1_reg_596_pp0_iter4_reg;
        select_ln185_1_reg_596_pp0_iter6_reg <= select_ln185_1_reg_596_pp0_iter5_reg;
        select_ln185_1_reg_596_pp0_iter7_reg <= select_ln185_1_reg_596_pp0_iter6_reg;
        select_ln185_1_reg_596_pp0_iter8_reg <= select_ln185_1_reg_596_pp0_iter7_reg;
        select_ln185_1_reg_596_pp0_iter9_reg <= select_ln185_1_reg_596_pp0_iter8_reg;
        tmp_1_reg_610_pp0_iter2_reg <= tmp_1_reg_610;
        tmp_1_reg_610_pp0_iter3_reg <= tmp_1_reg_610_pp0_iter2_reg;
        tmp_1_reg_610_pp0_iter4_reg <= tmp_1_reg_610_pp0_iter3_reg;
        tmp_1_reg_610_pp0_iter5_reg <= tmp_1_reg_610_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_582_pp0_iter6_reg == 1'd0))) begin
        add_ln194_9_reg_802 <= add_ln194_9_fu_533_p2;
        mul_ln194_2_reg_797 <= grp_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_577 <= grp_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read_reg_556 <= height_dout;
        vconv_xlim_loc_read_reg_561 <= vconv_xlim_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln185_reg_582 <= icmp_ln185_fu_362_p2;
        icmp_ln185_reg_582_pp0_iter1_reg <= icmp_ln185_reg_582;
        select_ln185_1_reg_596_pp0_iter1_reg <= select_ln185_1_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_reg_582 == 1'd0))) begin
        linebuf_0_addr_reg_617 <= zext_ln193_fu_421_p1;
        linebuf_1_addr_reg_623 <= zext_ln193_fu_421_p1;
        linebuf_2_addr_reg_629 <= zext_ln193_fu_421_p1;
        linebuf_3_addr_reg_635 <= zext_ln193_fu_421_p1;
        linebuf_4_addr_reg_641 <= zext_ln193_fu_421_p1;
        linebuf_5_addr_reg_647 <= zext_ln193_fu_421_p1;
        linebuf_6_addr_reg_653 <= zext_ln193_fu_421_p1;
        linebuf_7_addr_reg_659 <= zext_ln193_fu_421_p1;
        linebuf_8_addr_reg_665 <= zext_ln193_fu_421_p1;
        linebuf_9_addr_reg_671 <= zext_ln193_fu_421_p1;
        tmp_1_reg_610 <= hconv_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_0_load_reg_731 <= linebuf_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0))) begin
        linebuf_1_load_reg_677 <= linebuf_1_q0;
        linebuf_2_load_reg_683 <= linebuf_2_q0;
        linebuf_3_load_reg_689 <= linebuf_3_q0;
        linebuf_4_load_reg_695 <= linebuf_4_q0;
        linebuf_5_load_reg_701 <= linebuf_5_q0;
        linebuf_6_load_reg_707 <= linebuf_6_q0;
        linebuf_7_load_reg_713 <= linebuf_7_q0;
        linebuf_8_load_reg_719 <= linebuf_8_q0;
        linebuf_9_load_reg_725 <= linebuf_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_582_pp0_iter4_reg == 1'd0))) begin
        mul_ln194_1_reg_742 <= grp_fu_439_p2;
        mul_ln194_3_reg_747 <= grp_fu_444_p2;
        mul_ln194_4_reg_752 <= grp_fu_449_p2;
        mul_ln194_7_reg_757 <= grp_fu_454_p2;
        mul_ln194_8_reg_762 <= grp_fu_459_p2;
        mul_ln194_reg_737 <= grp_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_362_p2 == 1'd0))) begin
        select_ln185_1_reg_596 <= select_ln185_1_fu_399_p3;
        select_ln185_reg_591 <= select_ln185_fu_373_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_582_pp0_iter8_reg == 1'd0))) begin
        tmp_reg_812 <= tmp_fu_551_p2;
    end
end

always @ (*) begin
    if ((icmp_ln185_fu_362_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_434_ce = 1'b1;
    end else begin
        grp_fu_434_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_439_ce = 1'b1;
    end else begin
        grp_fu_439_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_444_ce = 1'b1;
    end else begin
        grp_fu_444_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_449_ce = 1'b1;
    end else begin
        grp_fu_449_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_454_ce = 1'b1;
    end else begin
        grp_fu_454_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_459_ce = 1'b1;
    end else begin
        grp_fu_459_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_464_ce = 1'b1;
    end else begin
        grp_fu_464_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_469_ce = 1'b1;
    end else begin
        grp_fu_469_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_474_ce = 1'b1;
    end else begin
        grp_fu_474_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_reg_582 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        hconv_V_blk_n = hconv_V_empty_n;
    end else begin
        hconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_reg_582 == 1'd0))) begin
        hconv_V_read = 1'b1;
    end else begin
        hconv_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_blk_n = height_out_full_n;
    end else begin
        height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_write = 1'b1;
    end else begin
        height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_0_ce0 = 1'b1;
    end else begin
        linebuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_0_ce1 = 1'b1;
    end else begin
        linebuf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_0_we1 = 1'b1;
    end else begin
        linebuf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_ce0 = 1'b1;
    end else begin
        linebuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_1_ce1 = 1'b1;
    end else begin
        linebuf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_1_we1 = 1'b1;
    end else begin
        linebuf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_ce0 = 1'b1;
    end else begin
        linebuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_2_ce1 = 1'b1;
    end else begin
        linebuf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_2_we1 = 1'b1;
    end else begin
        linebuf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_3_ce0 = 1'b1;
    end else begin
        linebuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_3_ce1 = 1'b1;
    end else begin
        linebuf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_3_we1 = 1'b1;
    end else begin
        linebuf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_4_ce0 = 1'b1;
    end else begin
        linebuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_4_ce1 = 1'b1;
    end else begin
        linebuf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_4_we1 = 1'b1;
    end else begin
        linebuf_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_5_ce0 = 1'b1;
    end else begin
        linebuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_5_ce1 = 1'b1;
    end else begin
        linebuf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_5_we1 = 1'b1;
    end else begin
        linebuf_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_6_ce0 = 1'b1;
    end else begin
        linebuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_6_ce1 = 1'b1;
    end else begin
        linebuf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_6_we1 = 1'b1;
    end else begin
        linebuf_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_7_ce0 = 1'b1;
    end else begin
        linebuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_7_ce1 = 1'b1;
    end else begin
        linebuf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_7_we1 = 1'b1;
    end else begin
        linebuf_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_8_ce0 = 1'b1;
    end else begin
        linebuf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_8_ce1 = 1'b1;
    end else begin
        linebuf_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0))) begin
        linebuf_8_we1 = 1'b1;
    end else begin
        linebuf_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_9_ce0 = 1'b1;
    end else begin
        linebuf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_9_ce1 = 1'b1;
    end else begin
        linebuf_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0))) begin
        linebuf_9_we1 = 1'b1;
    end else begin
        linebuf_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_596_pp0_iter9_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        vconv_V_blk_n = vconv_V_full_n;
    end else begin
        vconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_596_pp0_iter9_reg == 1'd1))) begin
        vconv_V_write = 1'b1;
    end else begin
        vconv_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_blk_n = vconv_xlim_loc_empty_n;
    end else begin
        vconv_xlim_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_out_blk_n = vconv_xlim_loc_out_full_n;
    end else begin
        vconv_xlim_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_out_write = 1'b1;
    end else begin
        vconv_xlim_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_read = 1'b1;
    end else begin
        vconv_xlim_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln185_fu_362_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln185_fu_362_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln185_1_fu_381_p2 = (11'd1 + col1_0_i_i_i_reg_319);

assign add_ln185_fu_367_p2 = (indvar_flatten_reg_308 + 64'd1);

assign add_ln194_10_fu_542_p2 = (add_ln194_9_reg_802 + add_ln194_6_fu_538_p2);

assign add_ln194_1_fu_505_p2 = (add_ln194_fu_499_p2 + shl_ln194_3_fu_494_p2);

assign add_ln194_2_fu_511_p2 = (mul_ln194_reg_737 + mul_ln194_1_reg_742);

assign add_ln194_3_fu_515_p2 = (add_ln194_2_fu_511_p2 + shl_ln194_1_fu_484_p2);

assign add_ln194_4_fu_547_p2 = (add_ln194_3_reg_782_pp0_iter8_reg + add_ln194_1_reg_777_pp0_iter8_reg);

assign add_ln194_5_fu_521_p2 = (mul_ln194_3_reg_747 + mul_ln194_4_reg_752);

assign add_ln194_6_fu_538_p2 = (add_ln194_5_reg_787_pp0_iter7_reg + mul_ln194_2_reg_797);

assign add_ln194_7_fu_529_p2 = (mul_ln194_5_reg_767 + mul_ln194_6_reg_772);

assign add_ln194_8_fu_525_p2 = (mul_ln194_7_reg_757 + mul_ln194_8_reg_762);

assign add_ln194_9_fu_533_p2 = (add_ln194_8_reg_792 + add_ln194_7_fu_529_p2);

assign add_ln194_fu_499_p2 = (shl_ln194_2_fu_489_p2 + shl_ln194_fu_479_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_596_pp0_iter9_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln185_reg_582 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_596_pp0_iter9_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln185_reg_582 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_596_pp0_iter9_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln185_reg_582 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter10 = ((vconv_V_full_n == 1'b0) & (select_ln185_1_reg_596_pp0_iter9_reg == 1'd1));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((hconv_V_empty_n == 1'b0) & (icmp_ln185_reg_582 == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_53 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_55 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_57 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_59 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_61 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_63 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_65 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_67 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_69 = (icmp_ln185_reg_582 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_70 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_71 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_72 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_73 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_74 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_75 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_76 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_77 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_78 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_79 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_80 = (icmp_ln185_reg_582_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_81 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_83 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_85 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_86 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_88 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_90 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_91 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_92 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_94 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_96 = (icmp_ln185_reg_582_pp0_iter2_reg == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state6_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state7_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state8_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign grp_fu_347_p0 = grp_fu_347_p00;

assign grp_fu_347_p00 = vconv_xlim_loc_read_reg_561;

assign grp_fu_347_p1 = grp_fu_347_p10;

assign grp_fu_347_p10 = height_read_reg_556;

assign grp_fu_434_p0 = 32'd111;

assign grp_fu_439_p0 = 32'd266;

assign grp_fu_444_p0 = 32'd724;

assign grp_fu_449_p0 = 32'd821;

assign grp_fu_454_p0 = 32'd266;

assign grp_fu_459_p0 = 32'd111;

assign grp_fu_464_p0 = 32'd724;

assign grp_fu_469_p0 = 32'd498;

assign grp_fu_474_p0 = 32'd498;

assign height_out_din = height_dout;

assign icmp_ln185_fu_362_p2 = ((indvar_flatten_reg_308 == bound_reg_577) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_357_p2 = (($signed(zext_ln186_fu_353_p1) < $signed(vconv_xlim_loc_read_reg_561)) ? 1'b1 : 1'b0);

assign icmp_ln198_1_fu_393_p2 = ((col1_0_i_i_i_reg_319 > 11'd9) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_387_p2 = ((add_ln185_1_fu_381_p2 > 11'd9) ? 1'b1 : 1'b0);

assign linebuf_0_address0 = linebuf_0_addr_reg_617;

assign linebuf_0_address1 = linebuf_0_addr_reg_617_pp0_iter2_reg;

assign linebuf_1_address0 = zext_ln193_fu_421_p1;

assign linebuf_1_address1 = linebuf_1_addr_reg_623_pp0_iter2_reg;

assign linebuf_2_address0 = zext_ln193_fu_421_p1;

assign linebuf_2_address1 = linebuf_2_addr_reg_629_pp0_iter2_reg;

assign linebuf_3_address0 = zext_ln193_fu_421_p1;

assign linebuf_3_address1 = linebuf_3_addr_reg_635_pp0_iter2_reg;

assign linebuf_4_address0 = zext_ln193_fu_421_p1;

assign linebuf_4_address1 = linebuf_4_addr_reg_641_pp0_iter2_reg;

assign linebuf_5_address0 = zext_ln193_fu_421_p1;

assign linebuf_5_address1 = linebuf_5_addr_reg_647_pp0_iter2_reg;

assign linebuf_6_address0 = zext_ln193_fu_421_p1;

assign linebuf_6_address1 = linebuf_6_addr_reg_653_pp0_iter2_reg;

assign linebuf_7_address0 = zext_ln193_fu_421_p1;

assign linebuf_7_address1 = linebuf_7_addr_reg_659_pp0_iter2_reg;

assign linebuf_8_address0 = zext_ln193_fu_421_p1;

assign linebuf_8_address1 = linebuf_8_addr_reg_665_pp0_iter2_reg;

assign linebuf_9_address0 = zext_ln193_fu_421_p1;

assign linebuf_9_address1 = linebuf_9_addr_reg_671;

assign row_fu_415_p2 = (select_ln185_fu_373_p3 + 11'd1);

assign select_ln185_1_fu_399_p3 = ((icmp_ln186_fu_357_p2[0:0] === 1'b1) ? icmp_ln198_1_fu_393_p2 : icmp_ln198_fu_387_p2);

assign select_ln185_2_fu_407_p3 = ((icmp_ln186_fu_357_p2[0:0] === 1'b1) ? col1_0_i_i_i_reg_319 : add_ln185_1_fu_381_p2);

assign select_ln185_fu_373_p3 = ((icmp_ln186_fu_357_p2[0:0] === 1'b1) ? row2_0_i_i_i_reg_330 : 11'd0);

assign shl_ln194_1_fu_484_p2 = linebuf_0_load_reg_731_pp0_iter5_reg << 32'd2;

assign shl_ln194_2_fu_489_p2 = tmp_1_reg_610_pp0_iter5_reg << 32'd5;

assign shl_ln194_3_fu_494_p2 = tmp_1_reg_610_pp0_iter5_reg << 32'd2;

assign shl_ln194_fu_479_p2 = linebuf_0_load_reg_731_pp0_iter5_reg << 32'd5;

assign tmp_fu_551_p2 = (add_ln194_10_reg_807 + add_ln194_4_fu_547_p2);

assign vconv_V_din = tmp_reg_812;

assign vconv_xlim_loc_out_din = vconv_xlim_loc_dout;

assign zext_ln186_fu_353_p1 = row2_0_i_i_i_reg_330;

assign zext_ln193_fu_421_p1 = select_ln185_reg_591;

always @ (posedge ap_clk) begin
    add_ln194_1_reg_777[1:0] <= 2'b00;
    add_ln194_1_reg_777_pp0_iter7_reg[1:0] <= 2'b00;
    add_ln194_1_reg_777_pp0_iter8_reg[1:0] <= 2'b00;
end

endmodule //Loop_VConvH_proc
