-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.2.0
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_VConvH_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    vconv_xlim_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_empty_n : IN STD_LOGIC;
    vconv_xlim_loc_read : OUT STD_LOGIC;
    hconv_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    hconv_V_empty_n : IN STD_LOGIC;
    hconv_V_read : OUT STD_LOGIC;
    vconv_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    vconv_V_full_n : IN STD_LOGIC;
    vconv_V_write : OUT STD_LOGIC;
    height_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    height_out_full_n : IN STD_LOGIC;
    height_out_write : OUT STD_LOGIC;
    vconv_xlim_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_out_full_n : IN STD_LOGIC;
    vconv_xlim_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of Loop_VConvH_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal linebuf_0_ce0 : STD_LOGIC;
    signal linebuf_0_we0 : STD_LOGIC;
    signal linebuf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_1_ce0 : STD_LOGIC;
    signal linebuf_1_we0 : STD_LOGIC;
    signal linebuf_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_2_ce0 : STD_LOGIC;
    signal linebuf_2_we0 : STD_LOGIC;
    signal linebuf_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_3_ce0 : STD_LOGIC;
    signal linebuf_3_we0 : STD_LOGIC;
    signal linebuf_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_4_ce0 : STD_LOGIC;
    signal linebuf_4_we0 : STD_LOGIC;
    signal linebuf_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_5_ce0 : STD_LOGIC;
    signal linebuf_5_we0 : STD_LOGIC;
    signal linebuf_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_6_ce0 : STD_LOGIC;
    signal linebuf_6_we0 : STD_LOGIC;
    signal linebuf_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_7_ce0 : STD_LOGIC;
    signal linebuf_7_we0 : STD_LOGIC;
    signal linebuf_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_8_ce0 : STD_LOGIC;
    signal linebuf_8_we0 : STD_LOGIC;
    signal linebuf_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_9_ce0 : STD_LOGIC;
    signal linebuf_9_we0 : STD_LOGIC;
    signal linebuf_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filt11_coeff_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal filt11_coeff_ce0 : STD_LOGIC;
    signal filt11_coeff_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal height_blk_n : STD_LOGIC;
    signal vconv_xlim_loc_blk_n : STD_LOGIC;
    signal hconv_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln186_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vconv_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln191_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_out_blk_n : STD_LOGIC;
    signal vconv_xlim_loc_out_blk_n : STD_LOGIC;
    signal height_read_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal vconv_xlim_loc_read_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_reg_459 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln197_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_361_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_reg_471 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_1_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_0_addr_reg_481 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_1_addr_reg_486 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_2_addr_reg_491 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_3_addr_reg_496 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_4_addr_reg_501 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_5_addr_reg_506 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_6_addr_reg_511 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_7_addr_reg_516 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_8_addr_reg_521 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_9_addr_reg_526 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_387_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_534 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_predicate_op73_write_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal linebuf_0_load_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal linebuf_1_load_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_2_load_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_3_load_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_4_load_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_5_load_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_6_load_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_7_load_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_8_load_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_9_load_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal vwin_val_fu_420_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal vwin_val_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal filt11_coeff_load_reg_609 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln193_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal out_val_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal col1_0_i_i_i_reg_284 : STD_LOGIC_VECTOR (10 downto 0);
    signal row2_0_i_i_i_reg_295 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_0_i_i_i_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln192_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln194_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln185_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln186_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln192_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_404_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_430_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_430_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component filter11x11_strm_mux_104_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter11x11_strm_mul_32s_10ns_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_VConvH_proc_linebuf_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_VConvH_proc_filt11_coeff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    linebuf_0_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_0_addr_reg_481,
        ce0 => linebuf_0_ce0,
        we0 => linebuf_0_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_0_q0);

    linebuf_1_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_1_addr_reg_486,
        ce0 => linebuf_1_ce0,
        we0 => linebuf_1_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_1_q0);

    linebuf_2_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_2_addr_reg_491,
        ce0 => linebuf_2_ce0,
        we0 => linebuf_2_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_2_q0);

    linebuf_3_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_3_addr_reg_496,
        ce0 => linebuf_3_ce0,
        we0 => linebuf_3_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_3_q0);

    linebuf_4_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_4_addr_reg_501,
        ce0 => linebuf_4_ce0,
        we0 => linebuf_4_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_4_q0);

    linebuf_5_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_5_addr_reg_506,
        ce0 => linebuf_5_ce0,
        we0 => linebuf_5_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_5_q0);

    linebuf_6_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_6_addr_reg_511,
        ce0 => linebuf_6_ce0,
        we0 => linebuf_6_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_6_q0);

    linebuf_7_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_7_addr_reg_516,
        ce0 => linebuf_7_ce0,
        we0 => linebuf_7_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_7_q0);

    linebuf_8_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_8_addr_reg_521,
        ce0 => linebuf_8_ce0,
        we0 => linebuf_8_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_8_q0);

    linebuf_9_U : component Loop_VConvH_proc_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_9_addr_reg_526,
        ce0 => linebuf_9_ce0,
        we0 => linebuf_9_we0,
        d0 => vwin_val_reg_594,
        q0 => linebuf_9_q0);

    filt11_coeff_U : component Loop_VConvH_proc_filt11_coeff
    generic map (
        DataWidth => 10,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filt11_coeff_address0,
        ce0 => filt11_coeff_ce0,
        q0 => filt11_coeff_q0);

    filter11x11_strm_mux_104_32_1_1_U30 : component filter11x11_strm_mux_104_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => linebuf_0_load_reg_539,
        din1 => linebuf_1_load_reg_544,
        din2 => linebuf_2_load_reg_549,
        din3 => linebuf_3_load_reg_554,
        din4 => linebuf_4_load_reg_559,
        din5 => linebuf_5_load_reg_564,
        din6 => linebuf_6_load_reg_569,
        din7 => linebuf_7_load_reg_574,
        din8 => linebuf_8_load_reg_579,
        din9 => linebuf_9_load_reg_584,
        din10 => i5_0_i_i_i_reg_319,
        dout => tmp_4_fu_404_p12);

    filter11x11_strm_mul_32s_10ns_32_3_1_U31 : component filter11x11_strm_mul_32s_10ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vwin_val_reg_594,
        din1 => grp_fu_430_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_430_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln185_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    col1_0_i_i_i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col1_0_i_i_i_reg_284 <= ap_const_lv11_0;
            elsif ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_0))) then 
                col1_0_i_i_i_reg_284 <= col_reg_459;
            end if; 
        end if;
    end process;

    i5_0_i_i_i_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i5_0_i_i_i_reg_319 <= i_reg_534;
            elsif ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) then 
                i5_0_i_i_i_reg_319 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row2_0_i_i_i_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln191_fu_381_p2 = ap_const_lv1_1))) then 
                row2_0_i_i_i_reg_295 <= row_reg_471;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln185_fu_335_p2 = ap_const_lv1_1))) then 
                row2_0_i_i_i_reg_295 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    tmp_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                tmp_reg_306 <= out_val_fu_435_p2;
            elsif ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) then 
                tmp_reg_306 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                col_reg_459 <= col_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                filt11_coeff_load_reg_609 <= filt11_coeff_q0;
                vwin_val_reg_594 <= vwin_val_fu_420_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                height_read_reg_446 <= height_dout;
                vconv_xlim_loc_read_reg_451 <= vconv_xlim_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_reg_534 <= i_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln185_fu_335_p2 = ap_const_lv1_1))) then
                icmp_ln197_reg_464 <= icmp_ln197_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) then
                linebuf_0_addr_reg_481 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_1_addr_reg_486 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_2_addr_reg_491 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_3_addr_reg_496 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_4_addr_reg_501 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_5_addr_reg_506 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_6_addr_reg_511 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_7_addr_reg_516 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_8_addr_reg_521 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                linebuf_9_addr_reg_526 <= zext_ln192_fu_367_p1(11 - 1 downto 0);
                tmp_1_reg_476 <= hconv_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                linebuf_0_load_reg_539 <= linebuf_0_q0;
                linebuf_1_load_reg_544 <= linebuf_1_q0;
                linebuf_2_load_reg_549 <= linebuf_2_q0;
                linebuf_3_load_reg_554 <= linebuf_3_q0;
                linebuf_4_load_reg_559 <= linebuf_4_q0;
                linebuf_5_load_reg_564 <= linebuf_5_q0;
                linebuf_6_load_reg_569 <= linebuf_6_q0;
                linebuf_7_load_reg_574 <= linebuf_7_q0;
                linebuf_8_load_reg_579 <= linebuf_8_q0;
                linebuf_9_load_reg_584 <= linebuf_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln193_reg_619 <= grp_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                row_reg_471 <= row_fu_361_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, hconv_V_empty_n, vconv_V_full_n, height_out_full_n, vconv_xlim_loc_out_full_n, ap_CS_fsm_state3, icmp_ln186_fu_356_p2, ap_CS_fsm_state4, icmp_ln191_fu_381_p2, ap_CS_fsm_state2, icmp_ln185_fu_335_p2, ap_predicate_op73_write_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln185_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln191_fu_381_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln191_fu_381_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
                ap_block_state1 <= ((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(hconv_V_empty_n, icmp_ln186_fu_356_p2)
    begin
                ap_block_state3 <= ((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1));
    end process;


    ap_block_state4_assign_proc : process(vconv_V_full_n, ap_predicate_op73_write_state4)
    begin
                ap_block_state4 <= ((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln185_fu_335_p2)
    begin
        if (((icmp_ln185_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op73_write_state4_assign_proc : process(icmp_ln191_fu_381_p2, icmp_ln197_reg_464)
    begin
                ap_predicate_op73_write_state4 <= ((icmp_ln197_reg_464 = ap_const_lv1_1) and (icmp_ln191_fu_381_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln185_fu_335_p2)
    begin
        if (((icmp_ln185_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_340_p2 <= std_logic_vector(unsigned(col1_0_i_i_i_reg_284) + unsigned(ap_const_lv11_1));
    filt11_coeff_address0 <= zext_ln193_fu_393_p1(4 - 1 downto 0);

    filt11_coeff_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filt11_coeff_ce0 <= ap_const_logic_1;
        else 
            filt11_coeff_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_430_p1 <= grp_fu_430_p10(10 - 1 downto 0);
    grp_fu_430_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filt11_coeff_load_reg_609),32));

    hconv_V_blk_n_assign_proc : process(hconv_V_empty_n, ap_CS_fsm_state3, icmp_ln186_fu_356_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) then 
            hconv_V_blk_n <= hconv_V_empty_n;
        else 
            hconv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hconv_V_read_assign_proc : process(hconv_V_empty_n, ap_CS_fsm_state3, icmp_ln186_fu_356_p2)
    begin
        if ((not(((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln186_fu_356_p2 = ap_const_lv1_1))) then 
            hconv_V_read <= ap_const_logic_1;
        else 
            hconv_V_read <= ap_const_logic_0;
        end if; 
    end process;


    height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_out_blk_n <= height_out_full_n;
        else 
            height_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    height_out_din <= height_dout;

    height_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_out_write <= ap_const_logic_1;
        else 
            height_out_write <= ap_const_logic_0;
        end if; 
    end process;


    height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_387_p2 <= std_logic_vector(unsigned(i5_0_i_i_i_reg_319) + unsigned(ap_const_lv4_1));
    icmp_ln185_fu_335_p2 <= "1" when (signed(zext_ln185_fu_331_p1) < signed(height_read_reg_446)) else "0";
    icmp_ln186_fu_356_p2 <= "1" when (signed(zext_ln186_fu_352_p1) < signed(vconv_xlim_loc_read_reg_451)) else "0";
    icmp_ln191_fu_381_p2 <= "1" when (i5_0_i_i_i_reg_319 = ap_const_lv4_B) else "0";
    icmp_ln192_fu_398_p2 <= "1" when (unsigned(i5_0_i_i_i_reg_319) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln194_fu_440_p2 <= "1" when (i5_0_i_i_i_reg_319 = ap_const_lv4_0) else "0";
    icmp_ln197_fu_346_p2 <= "1" when (unsigned(col1_0_i_i_i_reg_284) > unsigned(ap_const_lv11_9)) else "0";

    linebuf_0_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_0_ce0 <= ap_const_logic_1;
        else 
            linebuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_0_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_1) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_0_we0 <= ap_const_logic_1;
        else 
            linebuf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_1_ce0 <= ap_const_logic_1;
        else 
            linebuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_2) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_1_we0 <= ap_const_logic_1;
        else 
            linebuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_2_ce0 <= ap_const_logic_1;
        else 
            linebuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_3) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_2_we0 <= ap_const_logic_1;
        else 
            linebuf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_3_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_3_ce0 <= ap_const_logic_1;
        else 
            linebuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_3_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_4) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_3_we0 <= ap_const_logic_1;
        else 
            linebuf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_4_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_4_ce0 <= ap_const_logic_1;
        else 
            linebuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_4_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_5) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_4_we0 <= ap_const_logic_1;
        else 
            linebuf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_5_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_5_ce0 <= ap_const_logic_1;
        else 
            linebuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_5_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_6) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_5_we0 <= ap_const_logic_1;
        else 
            linebuf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_6_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_6_ce0 <= ap_const_logic_1;
        else 
            linebuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_6_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_7) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_6_we0 <= ap_const_logic_1;
        else 
            linebuf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_7_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_7_ce0 <= ap_const_logic_1;
        else 
            linebuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_7_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_8) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_7_we0 <= ap_const_logic_1;
        else 
            linebuf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_8_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_8_ce0 <= ap_const_logic_1;
        else 
            linebuf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_8_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if (((i5_0_i_i_i_reg_319 = ap_const_lv4_9) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_8_we0 <= ap_const_logic_1;
        else 
            linebuf_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_9_ce0_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_9_ce0 <= ap_const_logic_1;
        else 
            linebuf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_9_we0_assign_proc : process(ap_CS_fsm_state10, i5_0_i_i_i_reg_319, icmp_ln194_fu_440_p2)
    begin
        if ((not((i5_0_i_i_i_reg_319 = ap_const_lv4_9)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_8)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_7)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_6)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_5)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_4)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_3)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_2)) and not((i5_0_i_i_i_reg_319 = ap_const_lv4_1)) and (icmp_ln194_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuf_9_we0 <= ap_const_logic_1;
        else 
            linebuf_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_val_fu_435_p2 <= std_logic_vector(unsigned(mul_ln193_reg_619) + unsigned(tmp_reg_306));
    row_fu_361_p2 <= std_logic_vector(unsigned(row2_0_i_i_i_reg_295) + unsigned(ap_const_lv11_1));

    vconv_V_blk_n_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, icmp_ln191_fu_381_p2, icmp_ln197_reg_464)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln197_reg_464 = ap_const_lv1_1) and (icmp_ln191_fu_381_p2 = ap_const_lv1_1))) then 
            vconv_V_blk_n <= vconv_V_full_n;
        else 
            vconv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vconv_V_din <= tmp_reg_306;

    vconv_V_write_assign_proc : process(vconv_V_full_n, ap_CS_fsm_state4, ap_predicate_op73_write_state4)
    begin
        if ((not(((vconv_V_full_n = ap_const_logic_0) and (ap_predicate_op73_write_state4 = ap_const_boolean_1))) and (ap_predicate_op73_write_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            vconv_V_write <= ap_const_logic_1;
        else 
            vconv_V_write <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_blk_n <= vconv_xlim_loc_empty_n;
        else 
            vconv_xlim_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vconv_xlim_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_out_blk_n <= vconv_xlim_loc_out_full_n;
        else 
            vconv_xlim_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vconv_xlim_loc_out_din <= vconv_xlim_loc_dout;

    vconv_xlim_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_out_write <= ap_const_logic_1;
        else 
            vconv_xlim_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_read <= ap_const_logic_1;
        else 
            vconv_xlim_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    vwin_val_fu_420_p3 <= 
        tmp_4_fu_404_p12 when (icmp_ln192_fu_398_p2(0) = '1') else 
        tmp_1_reg_476;
    zext_ln185_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col1_0_i_i_i_reg_284),32));
    zext_ln186_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row2_0_i_i_i_reg_295),32));
    zext_ln192_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row2_0_i_i_i_reg_295),64));
    zext_ln193_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_i_i_i_reg_319),64));
end behav;
