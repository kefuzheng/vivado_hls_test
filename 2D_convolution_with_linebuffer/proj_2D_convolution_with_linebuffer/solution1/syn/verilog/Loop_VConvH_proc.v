// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_VConvH_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        height_dout,
        height_empty_n,
        height_read,
        vconv_xlim_loc_dout,
        vconv_xlim_loc_empty_n,
        vconv_xlim_loc_read,
        hconv_V_dout,
        hconv_V_empty_n,
        hconv_V_read,
        vconv_V_din,
        vconv_V_full_n,
        vconv_V_write,
        height_out_din,
        height_out_full_n,
        height_out_write,
        vconv_xlim_loc_out_din,
        vconv_xlim_loc_out_full_n,
        vconv_xlim_loc_out_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state16 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] height_dout;
input   height_empty_n;
output   height_read;
input  [31:0] vconv_xlim_loc_dout;
input   vconv_xlim_loc_empty_n;
output   vconv_xlim_loc_read;
input  [31:0] hconv_V_dout;
input   hconv_V_empty_n;
output   hconv_V_read;
output  [31:0] vconv_V_din;
input   vconv_V_full_n;
output   vconv_V_write;
output  [31:0] height_out_din;
input   height_out_full_n;
output   height_out_write;
output  [31:0] vconv_xlim_loc_out_din;
input   vconv_xlim_loc_out_full_n;
output   vconv_xlim_loc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg height_read;
reg vconv_xlim_loc_read;
reg hconv_V_read;
reg vconv_V_write;
reg height_out_write;
reg vconv_xlim_loc_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] linebuf_0_address0;
reg    linebuf_0_ce0;
wire   [31:0] linebuf_0_q0;
wire   [10:0] linebuf_0_address1;
reg    linebuf_0_ce1;
reg    linebuf_0_we1;
wire   [10:0] linebuf_1_address0;
reg    linebuf_1_ce0;
wire   [31:0] linebuf_1_q0;
wire   [10:0] linebuf_1_address1;
reg    linebuf_1_ce1;
reg    linebuf_1_we1;
wire   [10:0] linebuf_2_address0;
reg    linebuf_2_ce0;
wire   [31:0] linebuf_2_q0;
wire   [10:0] linebuf_2_address1;
reg    linebuf_2_ce1;
reg    linebuf_2_we1;
wire   [10:0] linebuf_3_address0;
reg    linebuf_3_ce0;
wire   [31:0] linebuf_3_q0;
wire   [10:0] linebuf_3_address1;
reg    linebuf_3_ce1;
reg    linebuf_3_we1;
wire   [10:0] linebuf_4_address0;
reg    linebuf_4_ce0;
wire   [31:0] linebuf_4_q0;
wire   [10:0] linebuf_4_address1;
reg    linebuf_4_ce1;
reg    linebuf_4_we1;
wire   [10:0] linebuf_5_address0;
reg    linebuf_5_ce0;
wire   [31:0] linebuf_5_q0;
wire   [10:0] linebuf_5_address1;
reg    linebuf_5_ce1;
reg    linebuf_5_we1;
wire   [10:0] linebuf_6_address0;
reg    linebuf_6_ce0;
wire   [31:0] linebuf_6_q0;
wire   [10:0] linebuf_6_address1;
reg    linebuf_6_ce1;
reg    linebuf_6_we1;
wire   [10:0] linebuf_7_address0;
reg    linebuf_7_ce0;
wire   [31:0] linebuf_7_q0;
wire   [10:0] linebuf_7_address1;
reg    linebuf_7_ce1;
reg    linebuf_7_we1;
wire   [10:0] linebuf_8_address0;
reg    linebuf_8_ce0;
wire   [31:0] linebuf_8_q0;
wire   [10:0] linebuf_8_address1;
reg    linebuf_8_ce1;
reg    linebuf_8_we1;
wire   [10:0] linebuf_9_address0;
reg    linebuf_9_ce0;
wire   [31:0] linebuf_9_q0;
wire   [10:0] linebuf_9_address1;
reg    linebuf_9_ce1;
reg    linebuf_9_we1;
reg    height_blk_n;
reg    vconv_xlim_loc_blk_n;
reg    hconv_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln185_reg_578;
reg    vconv_V_blk_n;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] select_ln185_1_reg_592;
reg   [0:0] select_ln185_1_reg_592_pp0_iter9_reg;
reg    height_out_blk_n;
reg    vconv_xlim_loc_out_blk_n;
reg   [63:0] indvar_flatten_reg_304;
reg   [10:0] col1_0_i_i_i_reg_315;
reg   [10:0] row2_0_i_i_i_reg_326;
reg   [31:0] height_read_reg_552;
reg    ap_block_state1;
reg   [31:0] vconv_xlim_loc_read_reg_557;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_343_p2;
reg   [63:0] bound_reg_573;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln185_fu_358_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
reg    ap_block_state15_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln185_reg_578_pp0_iter1_reg;
reg   [0:0] icmp_ln185_reg_578_pp0_iter2_reg;
reg   [0:0] icmp_ln185_reg_578_pp0_iter3_reg;
reg   [0:0] icmp_ln185_reg_578_pp0_iter4_reg;
reg   [0:0] icmp_ln185_reg_578_pp0_iter5_reg;
reg   [0:0] icmp_ln185_reg_578_pp0_iter6_reg;
reg   [0:0] icmp_ln185_reg_578_pp0_iter7_reg;
reg   [0:0] icmp_ln185_reg_578_pp0_iter8_reg;
wire   [63:0] add_ln185_fu_363_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] select_ln185_fu_369_p3;
reg   [10:0] select_ln185_reg_587;
wire   [0:0] select_ln185_1_fu_395_p3;
reg   [0:0] select_ln185_1_reg_592_pp0_iter1_reg;
reg   [0:0] select_ln185_1_reg_592_pp0_iter2_reg;
reg   [0:0] select_ln185_1_reg_592_pp0_iter3_reg;
reg   [0:0] select_ln185_1_reg_592_pp0_iter4_reg;
reg   [0:0] select_ln185_1_reg_592_pp0_iter5_reg;
reg   [0:0] select_ln185_1_reg_592_pp0_iter6_reg;
reg   [0:0] select_ln185_1_reg_592_pp0_iter7_reg;
reg   [0:0] select_ln185_1_reg_592_pp0_iter8_reg;
wire   [10:0] select_ln185_2_fu_403_p3;
wire   [10:0] row_fu_411_p2;
reg   [31:0] tmp_1_reg_606;
reg   [31:0] tmp_1_reg_606_pp0_iter2_reg;
reg   [31:0] tmp_1_reg_606_pp0_iter3_reg;
reg   [31:0] tmp_1_reg_606_pp0_iter4_reg;
reg   [31:0] tmp_1_reg_606_pp0_iter5_reg;
reg   [10:0] linebuf_0_addr_reg_613;
reg   [10:0] linebuf_0_addr_reg_613_pp0_iter2_reg;
reg   [10:0] linebuf_1_addr_reg_619;
reg   [10:0] linebuf_1_addr_reg_619_pp0_iter2_reg;
reg   [10:0] linebuf_2_addr_reg_625;
reg   [10:0] linebuf_2_addr_reg_625_pp0_iter2_reg;
reg   [10:0] linebuf_3_addr_reg_631;
reg   [10:0] linebuf_3_addr_reg_631_pp0_iter2_reg;
reg   [10:0] linebuf_4_addr_reg_637;
reg   [10:0] linebuf_4_addr_reg_637_pp0_iter2_reg;
reg   [10:0] linebuf_5_addr_reg_643;
reg   [10:0] linebuf_5_addr_reg_643_pp0_iter2_reg;
reg   [10:0] linebuf_6_addr_reg_649;
reg   [10:0] linebuf_6_addr_reg_649_pp0_iter2_reg;
reg   [10:0] linebuf_7_addr_reg_655;
reg   [10:0] linebuf_7_addr_reg_655_pp0_iter2_reg;
reg   [10:0] linebuf_8_addr_reg_661;
reg   [10:0] linebuf_8_addr_reg_661_pp0_iter2_reg;
reg   [10:0] linebuf_9_addr_reg_667;
reg   [31:0] linebuf_1_load_reg_673;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] linebuf_2_load_reg_679;
reg   [31:0] linebuf_3_load_reg_685;
reg  signed [31:0] linebuf_3_load_reg_685_pp0_iter3_reg;
reg  signed [31:0] linebuf_3_load_reg_685_pp0_iter4_reg;
reg   [31:0] linebuf_4_load_reg_691;
reg   [31:0] linebuf_5_load_reg_697;
reg   [31:0] linebuf_6_load_reg_703;
reg  signed [31:0] linebuf_6_load_reg_703_pp0_iter3_reg;
reg   [31:0] linebuf_7_load_reg_709;
reg  signed [31:0] linebuf_7_load_reg_709_pp0_iter3_reg;
reg   [31:0] linebuf_8_load_reg_715;
reg   [31:0] linebuf_9_load_reg_721;
reg   [31:0] linebuf_0_load_reg_727;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] linebuf_0_load_reg_727_pp0_iter4_reg;
reg   [31:0] linebuf_0_load_reg_727_pp0_iter5_reg;
wire   [31:0] grp_fu_430_p2;
reg   [31:0] mul_ln194_reg_733;
wire   [31:0] grp_fu_435_p2;
reg   [31:0] mul_ln194_1_reg_738;
wire   [31:0] grp_fu_440_p2;
reg   [31:0] mul_ln194_3_reg_743;
wire   [31:0] grp_fu_445_p2;
reg   [31:0] mul_ln194_4_reg_748;
wire   [31:0] grp_fu_450_p2;
reg   [31:0] mul_ln194_7_reg_753;
wire   [31:0] grp_fu_455_p2;
reg   [31:0] mul_ln194_8_reg_758;
wire   [31:0] grp_fu_460_p2;
reg   [31:0] mul_ln194_5_reg_763;
wire   [31:0] grp_fu_465_p2;
reg   [31:0] mul_ln194_6_reg_768;
wire   [31:0] add_ln194_1_fu_501_p2;
reg   [31:0] add_ln194_1_reg_773;
reg   [31:0] add_ln194_1_reg_773_pp0_iter7_reg;
reg   [31:0] add_ln194_1_reg_773_pp0_iter8_reg;
wire   [31:0] add_ln194_3_fu_511_p2;
reg   [31:0] add_ln194_3_reg_778;
reg   [31:0] add_ln194_3_reg_778_pp0_iter7_reg;
reg   [31:0] add_ln194_3_reg_778_pp0_iter8_reg;
wire   [31:0] add_ln194_5_fu_517_p2;
reg   [31:0] add_ln194_5_reg_783;
reg   [31:0] add_ln194_5_reg_783_pp0_iter7_reg;
wire   [31:0] add_ln194_8_fu_521_p2;
reg   [31:0] add_ln194_8_reg_788;
wire   [31:0] grp_fu_470_p2;
reg   [31:0] mul_ln194_2_reg_793;
wire   [31:0] add_ln194_9_fu_529_p2;
reg   [31:0] add_ln194_9_reg_798;
wire   [31:0] add_ln194_10_fu_538_p2;
reg   [31:0] add_ln194_10_reg_803;
wire   [31:0] tmp_fu_547_p2;
reg   [31:0] tmp_reg_808;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire   [63:0] zext_ln193_fu_417_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_343_p0;
wire   [31:0] grp_fu_343_p1;
wire   [31:0] zext_ln186_fu_349_p1;
wire   [0:0] icmp_ln186_fu_353_p2;
wire   [10:0] add_ln185_1_fu_377_p2;
wire   [0:0] icmp_ln198_1_fu_389_p2;
wire   [0:0] icmp_ln198_fu_383_p2;
wire   [7:0] grp_fu_430_p0;
wire   [9:0] grp_fu_435_p0;
wire   [10:0] grp_fu_440_p0;
wire   [10:0] grp_fu_445_p0;
wire   [9:0] grp_fu_450_p0;
wire   [7:0] grp_fu_455_p0;
wire   [10:0] grp_fu_460_p0;
wire   [9:0] grp_fu_465_p0;
wire   [9:0] grp_fu_470_p0;
wire   [31:0] shl_ln194_2_fu_485_p2;
wire   [31:0] shl_ln194_fu_475_p2;
wire   [31:0] add_ln194_fu_495_p2;
wire   [31:0] shl_ln194_3_fu_490_p2;
wire   [31:0] add_ln194_2_fu_507_p2;
wire   [31:0] shl_ln194_1_fu_480_p2;
wire   [31:0] add_ln194_7_fu_525_p2;
wire   [31:0] add_ln194_6_fu_534_p2;
wire   [31:0] add_ln194_4_fu_543_p2;
reg    grp_fu_430_ce;
reg    grp_fu_435_ce;
reg    grp_fu_440_ce;
reg    grp_fu_445_ce;
reg    grp_fu_450_ce;
reg    grp_fu_455_ce;
reg    grp_fu_460_ce;
reg    grp_fu_465_ce;
reg    grp_fu_470_ce;
wire    ap_CS_fsm_state16;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_53;
reg    ap_enable_state6_pp0_iter1_stage0;
reg    ap_enable_operation_71;
reg    ap_enable_state7_pp0_iter2_stage0;
reg    ap_enable_operation_85;
reg    ap_enable_state8_pp0_iter3_stage0;
reg    ap_enable_operation_55;
reg    ap_enable_operation_72;
reg    ap_enable_operation_86;
reg    ap_enable_operation_57;
reg    ap_enable_operation_73;
reg    ap_enable_operation_88;
reg    ap_enable_operation_59;
reg    ap_enable_operation_74;
reg    ap_enable_operation_90;
reg    ap_enable_operation_61;
reg    ap_enable_operation_75;
reg    ap_enable_operation_91;
reg    ap_enable_operation_63;
reg    ap_enable_operation_76;
reg    ap_enable_operation_92;
reg    ap_enable_operation_65;
reg    ap_enable_operation_77;
reg    ap_enable_operation_94;
reg    ap_enable_operation_67;
reg    ap_enable_operation_78;
reg    ap_enable_operation_96;
reg    ap_enable_operation_69;
reg    ap_enable_operation_79;
reg    ap_enable_operation_80;
reg    ap_enable_operation_70;
reg    ap_enable_operation_81;
reg    ap_enable_operation_83;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_343_p00;
wire   [63:0] grp_fu_343_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_0_address0),
    .ce0(linebuf_0_ce0),
    .q0(linebuf_0_q0),
    .address1(linebuf_0_address1),
    .ce1(linebuf_0_ce1),
    .we1(linebuf_0_we1),
    .d1(linebuf_1_load_reg_673)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_1_address0),
    .ce0(linebuf_1_ce0),
    .q0(linebuf_1_q0),
    .address1(linebuf_1_address1),
    .ce1(linebuf_1_ce1),
    .we1(linebuf_1_we1),
    .d1(linebuf_2_load_reg_679)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_2_address0),
    .ce0(linebuf_2_ce0),
    .q0(linebuf_2_q0),
    .address1(linebuf_2_address1),
    .ce1(linebuf_2_ce1),
    .we1(linebuf_2_we1),
    .d1(linebuf_3_load_reg_685)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_3_address0),
    .ce0(linebuf_3_ce0),
    .q0(linebuf_3_q0),
    .address1(linebuf_3_address1),
    .ce1(linebuf_3_ce1),
    .we1(linebuf_3_we1),
    .d1(linebuf_4_load_reg_691)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_4_address0),
    .ce0(linebuf_4_ce0),
    .q0(linebuf_4_q0),
    .address1(linebuf_4_address1),
    .ce1(linebuf_4_ce1),
    .we1(linebuf_4_we1),
    .d1(linebuf_5_load_reg_697)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_5_address0),
    .ce0(linebuf_5_ce0),
    .q0(linebuf_5_q0),
    .address1(linebuf_5_address1),
    .ce1(linebuf_5_ce1),
    .we1(linebuf_5_we1),
    .d1(linebuf_6_load_reg_703)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_6_address0),
    .ce0(linebuf_6_ce0),
    .q0(linebuf_6_q0),
    .address1(linebuf_6_address1),
    .ce1(linebuf_6_ce1),
    .we1(linebuf_6_we1),
    .d1(linebuf_7_load_reg_709)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_7_address0),
    .ce0(linebuf_7_ce0),
    .q0(linebuf_7_q0),
    .address1(linebuf_7_address1),
    .ce1(linebuf_7_ce1),
    .we1(linebuf_7_we1),
    .d1(linebuf_8_load_reg_715)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_8_address0),
    .ce0(linebuf_8_ce0),
    .q0(linebuf_8_q0),
    .address1(linebuf_8_address1),
    .ce1(linebuf_8_ce1),
    .we1(linebuf_8_we1),
    .d1(linebuf_9_load_reg_721)
);

Loop_VConvH_proc_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_9_address0),
    .ce0(linebuf_9_ce0),
    .q0(linebuf_9_q0),
    .address1(linebuf_9_address1),
    .ce1(linebuf_9_ce1),
    .we1(linebuf_9_we1),
    .d1(tmp_1_reg_606)
);

filter11x11_strm_mul_32ns_32ns_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
filter11x11_strm_mul_32ns_32ns_64_3_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_343_p0),
    .din1(grp_fu_343_p1),
    .ce(1'b1),
    .dout(grp_fu_343_p2)
);

filter11x11_strm_mul_8ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_8ns_32s_32_3_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_430_p0),
    .din1(linebuf_1_load_reg_673),
    .ce(grp_fu_430_ce),
    .dout(grp_fu_430_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_435_p0),
    .din1(linebuf_2_load_reg_679),
    .ce(grp_fu_435_ce),
    .dout(grp_fu_435_p2)
);

filter11x11_strm_mul_11ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_11ns_32s_32_3_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_440_p0),
    .din1(linebuf_4_load_reg_691),
    .ce(grp_fu_440_ce),
    .dout(grp_fu_440_p2)
);

filter11x11_strm_mul_11ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_11ns_32s_32_3_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_445_p0),
    .din1(linebuf_5_load_reg_697),
    .ce(grp_fu_445_ce),
    .dout(grp_fu_445_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_450_p0),
    .din1(linebuf_8_load_reg_715),
    .ce(grp_fu_450_ce),
    .dout(grp_fu_450_p2)
);

filter11x11_strm_mul_8ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_8ns_32s_32_3_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_455_p0),
    .din1(linebuf_9_load_reg_721),
    .ce(grp_fu_455_ce),
    .dout(grp_fu_455_p2)
);

filter11x11_strm_mul_11ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_11ns_32s_32_3_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_460_p0),
    .din1(linebuf_6_load_reg_703_pp0_iter3_reg),
    .ce(grp_fu_460_ce),
    .dout(grp_fu_460_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_465_p0),
    .din1(linebuf_7_load_reg_709_pp0_iter3_reg),
    .ce(grp_fu_465_ce),
    .dout(grp_fu_465_p2)
);

filter11x11_strm_mul_10ns_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter11x11_strm_mul_10ns_32s_32_3_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_470_p0),
    .din1(linebuf_3_load_reg_685_pp0_iter4_reg),
    .ce(grp_fu_470_ce),
    .dout(grp_fu_470_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_358_p2 == 1'd0))) begin
        col1_0_i_i_i_reg_315 <= select_ln185_2_fu_403_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        col1_0_i_i_i_reg_315 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_358_p2 == 1'd0))) begin
        indvar_flatten_reg_304 <= add_ln185_fu_363_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_304 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_358_p2 == 1'd0))) begin
        row2_0_i_i_i_reg_326 <= row_fu_411_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        row2_0_i_i_i_reg_326 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_578_pp0_iter7_reg == 1'd0))) begin
        add_ln194_10_reg_803 <= add_ln194_10_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_578_pp0_iter5_reg == 1'd0))) begin
        add_ln194_1_reg_773[31 : 2] <= add_ln194_1_fu_501_p2[31 : 2];
        add_ln194_3_reg_778 <= add_ln194_3_fu_511_p2;
        add_ln194_5_reg_783 <= add_ln194_5_fu_517_p2;
        add_ln194_8_reg_788 <= add_ln194_8_fu_521_p2;
        mul_ln194_5_reg_763 <= grp_fu_460_p2;
        mul_ln194_6_reg_768 <= grp_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln194_1_reg_773_pp0_iter7_reg[31 : 2] <= add_ln194_1_reg_773[31 : 2];
        add_ln194_1_reg_773_pp0_iter8_reg[31 : 2] <= add_ln194_1_reg_773_pp0_iter7_reg[31 : 2];
        add_ln194_3_reg_778_pp0_iter7_reg <= add_ln194_3_reg_778;
        add_ln194_3_reg_778_pp0_iter8_reg <= add_ln194_3_reg_778_pp0_iter7_reg;
        add_ln194_5_reg_783_pp0_iter7_reg <= add_ln194_5_reg_783;
        icmp_ln185_reg_578_pp0_iter2_reg <= icmp_ln185_reg_578_pp0_iter1_reg;
        icmp_ln185_reg_578_pp0_iter3_reg <= icmp_ln185_reg_578_pp0_iter2_reg;
        icmp_ln185_reg_578_pp0_iter4_reg <= icmp_ln185_reg_578_pp0_iter3_reg;
        icmp_ln185_reg_578_pp0_iter5_reg <= icmp_ln185_reg_578_pp0_iter4_reg;
        icmp_ln185_reg_578_pp0_iter6_reg <= icmp_ln185_reg_578_pp0_iter5_reg;
        icmp_ln185_reg_578_pp0_iter7_reg <= icmp_ln185_reg_578_pp0_iter6_reg;
        icmp_ln185_reg_578_pp0_iter8_reg <= icmp_ln185_reg_578_pp0_iter7_reg;
        linebuf_0_addr_reg_613_pp0_iter2_reg <= linebuf_0_addr_reg_613;
        linebuf_0_load_reg_727_pp0_iter4_reg <= linebuf_0_load_reg_727;
        linebuf_0_load_reg_727_pp0_iter5_reg <= linebuf_0_load_reg_727_pp0_iter4_reg;
        linebuf_1_addr_reg_619_pp0_iter2_reg <= linebuf_1_addr_reg_619;
        linebuf_2_addr_reg_625_pp0_iter2_reg <= linebuf_2_addr_reg_625;
        linebuf_3_addr_reg_631_pp0_iter2_reg <= linebuf_3_addr_reg_631;
        linebuf_3_load_reg_685_pp0_iter3_reg <= linebuf_3_load_reg_685;
        linebuf_3_load_reg_685_pp0_iter4_reg <= linebuf_3_load_reg_685_pp0_iter3_reg;
        linebuf_4_addr_reg_637_pp0_iter2_reg <= linebuf_4_addr_reg_637;
        linebuf_5_addr_reg_643_pp0_iter2_reg <= linebuf_5_addr_reg_643;
        linebuf_6_addr_reg_649_pp0_iter2_reg <= linebuf_6_addr_reg_649;
        linebuf_6_load_reg_703_pp0_iter3_reg <= linebuf_6_load_reg_703;
        linebuf_7_addr_reg_655_pp0_iter2_reg <= linebuf_7_addr_reg_655;
        linebuf_7_load_reg_709_pp0_iter3_reg <= linebuf_7_load_reg_709;
        linebuf_8_addr_reg_661_pp0_iter2_reg <= linebuf_8_addr_reg_661;
        select_ln185_1_reg_592_pp0_iter2_reg <= select_ln185_1_reg_592_pp0_iter1_reg;
        select_ln185_1_reg_592_pp0_iter3_reg <= select_ln185_1_reg_592_pp0_iter2_reg;
        select_ln185_1_reg_592_pp0_iter4_reg <= select_ln185_1_reg_592_pp0_iter3_reg;
        select_ln185_1_reg_592_pp0_iter5_reg <= select_ln185_1_reg_592_pp0_iter4_reg;
        select_ln185_1_reg_592_pp0_iter6_reg <= select_ln185_1_reg_592_pp0_iter5_reg;
        select_ln185_1_reg_592_pp0_iter7_reg <= select_ln185_1_reg_592_pp0_iter6_reg;
        select_ln185_1_reg_592_pp0_iter8_reg <= select_ln185_1_reg_592_pp0_iter7_reg;
        select_ln185_1_reg_592_pp0_iter9_reg <= select_ln185_1_reg_592_pp0_iter8_reg;
        tmp_1_reg_606_pp0_iter2_reg <= tmp_1_reg_606;
        tmp_1_reg_606_pp0_iter3_reg <= tmp_1_reg_606_pp0_iter2_reg;
        tmp_1_reg_606_pp0_iter4_reg <= tmp_1_reg_606_pp0_iter3_reg;
        tmp_1_reg_606_pp0_iter5_reg <= tmp_1_reg_606_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_578_pp0_iter6_reg == 1'd0))) begin
        add_ln194_9_reg_798 <= add_ln194_9_fu_529_p2;
        mul_ln194_2_reg_793 <= grp_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_573 <= grp_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read_reg_552 <= height_dout;
        vconv_xlim_loc_read_reg_557 <= vconv_xlim_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln185_reg_578 <= icmp_ln185_fu_358_p2;
        icmp_ln185_reg_578_pp0_iter1_reg <= icmp_ln185_reg_578;
        select_ln185_1_reg_592_pp0_iter1_reg <= select_ln185_1_reg_592;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_reg_578 == 1'd0))) begin
        linebuf_0_addr_reg_613 <= zext_ln193_fu_417_p1;
        linebuf_1_addr_reg_619 <= zext_ln193_fu_417_p1;
        linebuf_2_addr_reg_625 <= zext_ln193_fu_417_p1;
        linebuf_3_addr_reg_631 <= zext_ln193_fu_417_p1;
        linebuf_4_addr_reg_637 <= zext_ln193_fu_417_p1;
        linebuf_5_addr_reg_643 <= zext_ln193_fu_417_p1;
        linebuf_6_addr_reg_649 <= zext_ln193_fu_417_p1;
        linebuf_7_addr_reg_655 <= zext_ln193_fu_417_p1;
        linebuf_8_addr_reg_661 <= zext_ln193_fu_417_p1;
        linebuf_9_addr_reg_667 <= zext_ln193_fu_417_p1;
        tmp_1_reg_606 <= hconv_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_0_load_reg_727 <= linebuf_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0))) begin
        linebuf_1_load_reg_673 <= linebuf_1_q0;
        linebuf_2_load_reg_679 <= linebuf_2_q0;
        linebuf_3_load_reg_685 <= linebuf_3_q0;
        linebuf_4_load_reg_691 <= linebuf_4_q0;
        linebuf_5_load_reg_697 <= linebuf_5_q0;
        linebuf_6_load_reg_703 <= linebuf_6_q0;
        linebuf_7_load_reg_709 <= linebuf_7_q0;
        linebuf_8_load_reg_715 <= linebuf_8_q0;
        linebuf_9_load_reg_721 <= linebuf_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_578_pp0_iter4_reg == 1'd0))) begin
        mul_ln194_1_reg_738 <= grp_fu_435_p2;
        mul_ln194_3_reg_743 <= grp_fu_440_p2;
        mul_ln194_4_reg_748 <= grp_fu_445_p2;
        mul_ln194_7_reg_753 <= grp_fu_450_p2;
        mul_ln194_8_reg_758 <= grp_fu_455_p2;
        mul_ln194_reg_733 <= grp_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_fu_358_p2 == 1'd0))) begin
        select_ln185_1_reg_592 <= select_ln185_1_fu_395_p3;
        select_ln185_reg_587 <= select_ln185_fu_369_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_578_pp0_iter8_reg == 1'd0))) begin
        tmp_reg_808 <= tmp_fu_547_p2;
    end
end

always @ (*) begin
    if ((icmp_ln185_fu_358_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_430_ce = 1'b1;
    end else begin
        grp_fu_430_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_435_ce = 1'b1;
    end else begin
        grp_fu_435_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_440_ce = 1'b1;
    end else begin
        grp_fu_440_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_445_ce = 1'b1;
    end else begin
        grp_fu_445_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_450_ce = 1'b1;
    end else begin
        grp_fu_450_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_455_ce = 1'b1;
    end else begin
        grp_fu_455_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_460_ce = 1'b1;
    end else begin
        grp_fu_460_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_465_ce = 1'b1;
    end else begin
        grp_fu_465_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_470_ce = 1'b1;
    end else begin
        grp_fu_470_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_reg_578 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        hconv_V_blk_n = hconv_V_empty_n;
    end else begin
        hconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln185_reg_578 == 1'd0))) begin
        hconv_V_read = 1'b1;
    end else begin
        hconv_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_blk_n = height_out_full_n;
    end else begin
        height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_write = 1'b1;
    end else begin
        height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_0_ce0 = 1'b1;
    end else begin
        linebuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_0_ce1 = 1'b1;
    end else begin
        linebuf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_0_we1 = 1'b1;
    end else begin
        linebuf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_ce0 = 1'b1;
    end else begin
        linebuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_1_ce1 = 1'b1;
    end else begin
        linebuf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_1_we1 = 1'b1;
    end else begin
        linebuf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_ce0 = 1'b1;
    end else begin
        linebuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_2_ce1 = 1'b1;
    end else begin
        linebuf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_2_we1 = 1'b1;
    end else begin
        linebuf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_3_ce0 = 1'b1;
    end else begin
        linebuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_3_ce1 = 1'b1;
    end else begin
        linebuf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_3_we1 = 1'b1;
    end else begin
        linebuf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_4_ce0 = 1'b1;
    end else begin
        linebuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_4_ce1 = 1'b1;
    end else begin
        linebuf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_4_we1 = 1'b1;
    end else begin
        linebuf_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_5_ce0 = 1'b1;
    end else begin
        linebuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_5_ce1 = 1'b1;
    end else begin
        linebuf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_5_we1 = 1'b1;
    end else begin
        linebuf_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_6_ce0 = 1'b1;
    end else begin
        linebuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_6_ce1 = 1'b1;
    end else begin
        linebuf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_6_we1 = 1'b1;
    end else begin
        linebuf_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_7_ce0 = 1'b1;
    end else begin
        linebuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_7_ce1 = 1'b1;
    end else begin
        linebuf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_7_we1 = 1'b1;
    end else begin
        linebuf_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_8_ce0 = 1'b1;
    end else begin
        linebuf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        linebuf_8_ce1 = 1'b1;
    end else begin
        linebuf_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0))) begin
        linebuf_8_we1 = 1'b1;
    end else begin
        linebuf_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_9_ce0 = 1'b1;
    end else begin
        linebuf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_9_ce1 = 1'b1;
    end else begin
        linebuf_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0))) begin
        linebuf_9_we1 = 1'b1;
    end else begin
        linebuf_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_592_pp0_iter9_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        vconv_V_blk_n = vconv_V_full_n;
    end else begin
        vconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_592_pp0_iter9_reg == 1'd1))) begin
        vconv_V_write = 1'b1;
    end else begin
        vconv_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_blk_n = vconv_xlim_loc_empty_n;
    end else begin
        vconv_xlim_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_out_blk_n = vconv_xlim_loc_out_full_n;
    end else begin
        vconv_xlim_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_out_write = 1'b1;
    end else begin
        vconv_xlim_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_read = 1'b1;
    end else begin
        vconv_xlim_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln185_fu_358_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln185_fu_358_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln185_1_fu_377_p2 = (11'd1 + col1_0_i_i_i_reg_315);

assign add_ln185_fu_363_p2 = (indvar_flatten_reg_304 + 64'd1);

assign add_ln194_10_fu_538_p2 = (add_ln194_9_reg_798 + add_ln194_6_fu_534_p2);

assign add_ln194_1_fu_501_p2 = (add_ln194_fu_495_p2 + shl_ln194_3_fu_490_p2);

assign add_ln194_2_fu_507_p2 = (mul_ln194_reg_733 + mul_ln194_1_reg_738);

assign add_ln194_3_fu_511_p2 = (add_ln194_2_fu_507_p2 + shl_ln194_1_fu_480_p2);

assign add_ln194_4_fu_543_p2 = (add_ln194_3_reg_778_pp0_iter8_reg + add_ln194_1_reg_773_pp0_iter8_reg);

assign add_ln194_5_fu_517_p2 = (mul_ln194_3_reg_743 + mul_ln194_4_reg_748);

assign add_ln194_6_fu_534_p2 = (add_ln194_5_reg_783_pp0_iter7_reg + mul_ln194_2_reg_793);

assign add_ln194_7_fu_525_p2 = (mul_ln194_5_reg_763 + mul_ln194_6_reg_768);

assign add_ln194_8_fu_521_p2 = (mul_ln194_7_reg_753 + mul_ln194_8_reg_758);

assign add_ln194_9_fu_529_p2 = (add_ln194_8_reg_788 + add_ln194_7_fu_525_p2);

assign add_ln194_fu_495_p2 = (shl_ln194_2_fu_485_p2 + shl_ln194_fu_475_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_592_pp0_iter9_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln185_reg_578 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_592_pp0_iter9_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln185_reg_578 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln185_1_reg_592_pp0_iter9_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln185_reg_578 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((vconv_xlim_loc_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter10 = ((vconv_V_full_n == 1'b0) & (select_ln185_1_reg_592_pp0_iter9_reg == 1'd1));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((hconv_V_empty_n == 1'b0) & (icmp_ln185_reg_578 == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_53 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_55 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_57 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_59 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_61 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_63 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_65 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_67 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_69 = (icmp_ln185_reg_578 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_70 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_71 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_72 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_73 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_74 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_75 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_76 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_77 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_78 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_79 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_80 = (icmp_ln185_reg_578_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_81 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_83 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_85 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_86 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_88 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_90 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_91 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_92 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_94 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_96 = (icmp_ln185_reg_578_pp0_iter2_reg == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state6_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state7_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state8_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign grp_fu_343_p0 = grp_fu_343_p00;

assign grp_fu_343_p00 = vconv_xlim_loc_read_reg_557;

assign grp_fu_343_p1 = grp_fu_343_p10;

assign grp_fu_343_p10 = height_read_reg_552;

assign grp_fu_430_p0 = 32'd111;

assign grp_fu_435_p0 = 32'd266;

assign grp_fu_440_p0 = 32'd724;

assign grp_fu_445_p0 = 32'd821;

assign grp_fu_450_p0 = 32'd266;

assign grp_fu_455_p0 = 32'd111;

assign grp_fu_460_p0 = 32'd724;

assign grp_fu_465_p0 = 32'd498;

assign grp_fu_470_p0 = 32'd498;

assign height_out_din = height_dout;

assign icmp_ln185_fu_358_p2 = ((indvar_flatten_reg_304 == bound_reg_573) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_353_p2 = (($signed(zext_ln186_fu_349_p1) < $signed(vconv_xlim_loc_read_reg_557)) ? 1'b1 : 1'b0);

assign icmp_ln198_1_fu_389_p2 = ((col1_0_i_i_i_reg_315 > 11'd9) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_383_p2 = ((add_ln185_1_fu_377_p2 > 11'd9) ? 1'b1 : 1'b0);

assign linebuf_0_address0 = linebuf_0_addr_reg_613;

assign linebuf_0_address1 = linebuf_0_addr_reg_613_pp0_iter2_reg;

assign linebuf_1_address0 = zext_ln193_fu_417_p1;

assign linebuf_1_address1 = linebuf_1_addr_reg_619_pp0_iter2_reg;

assign linebuf_2_address0 = zext_ln193_fu_417_p1;

assign linebuf_2_address1 = linebuf_2_addr_reg_625_pp0_iter2_reg;

assign linebuf_3_address0 = zext_ln193_fu_417_p1;

assign linebuf_3_address1 = linebuf_3_addr_reg_631_pp0_iter2_reg;

assign linebuf_4_address0 = zext_ln193_fu_417_p1;

assign linebuf_4_address1 = linebuf_4_addr_reg_637_pp0_iter2_reg;

assign linebuf_5_address0 = zext_ln193_fu_417_p1;

assign linebuf_5_address1 = linebuf_5_addr_reg_643_pp0_iter2_reg;

assign linebuf_6_address0 = zext_ln193_fu_417_p1;

assign linebuf_6_address1 = linebuf_6_addr_reg_649_pp0_iter2_reg;

assign linebuf_7_address0 = zext_ln193_fu_417_p1;

assign linebuf_7_address1 = linebuf_7_addr_reg_655_pp0_iter2_reg;

assign linebuf_8_address0 = zext_ln193_fu_417_p1;

assign linebuf_8_address1 = linebuf_8_addr_reg_661_pp0_iter2_reg;

assign linebuf_9_address0 = zext_ln193_fu_417_p1;

assign linebuf_9_address1 = linebuf_9_addr_reg_667;

assign row_fu_411_p2 = (select_ln185_fu_369_p3 + 11'd1);

assign select_ln185_1_fu_395_p3 = ((icmp_ln186_fu_353_p2[0:0] === 1'b1) ? icmp_ln198_1_fu_389_p2 : icmp_ln198_fu_383_p2);

assign select_ln185_2_fu_403_p3 = ((icmp_ln186_fu_353_p2[0:0] === 1'b1) ? col1_0_i_i_i_reg_315 : add_ln185_1_fu_377_p2);

assign select_ln185_fu_369_p3 = ((icmp_ln186_fu_353_p2[0:0] === 1'b1) ? row2_0_i_i_i_reg_326 : 11'd0);

assign shl_ln194_1_fu_480_p2 = linebuf_0_load_reg_727_pp0_iter5_reg << 32'd2;

assign shl_ln194_2_fu_485_p2 = tmp_1_reg_606_pp0_iter5_reg << 32'd5;

assign shl_ln194_3_fu_490_p2 = tmp_1_reg_606_pp0_iter5_reg << 32'd2;

assign shl_ln194_fu_475_p2 = linebuf_0_load_reg_727_pp0_iter5_reg << 32'd5;

assign tmp_fu_547_p2 = (add_ln194_10_reg_803 + add_ln194_4_fu_543_p2);

assign vconv_V_din = tmp_reg_808;

assign vconv_xlim_loc_out_din = vconv_xlim_loc_dout;

assign zext_ln186_fu_349_p1 = row2_0_i_i_i_reg_326;

assign zext_ln193_fu_417_p1 = select_ln185_reg_587;

always @ (posedge ap_clk) begin
    add_ln194_1_reg_773[1:0] <= 2'b00;
    add_ln194_1_reg_773_pp0_iter7_reg[1:0] <= 2'b00;
    add_ln194_1_reg_773_pp0_iter8_reg[1:0] <= 2'b00;
end

endmodule //Loop_VConvH_proc
